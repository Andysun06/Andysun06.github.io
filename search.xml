<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习笔记</title>
      <link href="/2020/04/28/Learning-Notes/"/>
      <url>/2020/04/28/Learning-Notes/</url>
      
        <content type="html"><![CDATA[<h2 id="蒟蒻Andysun06的学习笔记"><a href="#蒟蒻Andysun06的学习笔记" class="headerlink" title="蒟蒻Andysun06的学习笔记"></a>蒟蒻Andysun06的学习笔记</h2><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ本文章未经博主许可，不能转载！</p><h4 id="本文章同步发表于："><a href="#本文章同步发表于：" class="headerlink" title="本文章同步发表于："></a>本文章同步发表于：</h4><ul><li><a href="https://www.luogu.com.cn/blog/andysun123/Learning-notes" target="_blank" rel="noopener">洛谷博客</a></li><li><a href="https://blog.csdn.net/a_n_d_y_s_u_n__/article/details/105159775" target="_blank" rel="noopener">CSDN博客</a></li><li><a href="https://www.zybuluo.com/Andysun06/note/1687658" target="_blank" rel="noopener">作业部落博客</a></li><li><a href="https://oiblog.blog.luogu.org/Learning-notes" target="_blank" rel="noopener">小号博客</a></li></ul><hr><h3 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h3><p>ㅤㅤ本文章是蒟蒻我独立创作的，大部分内容都是基础，还包括一些其他东西的用法（例如随机数），本文章<br>所涉及的知识大部分都是自学的（因为还没找到适合我的老师）。还有一部分，是@[FCBM71]<br>(<a href="https://www.luogu.com.cn/user/45176" target="_blank" rel="noopener">https://www.luogu.com.cn/user/45176</a>) 和@<a href="https://www.luogu.com.cn/user/227514" target="_blank" rel="noopener">jijidawang</a> 等大<br>佬教我的，我在此感谢他们对我的教导，希望我可以和他们共同努力，变得更厉害，也谢谢广大谷友对我的帮<br>助和支持，我会继续努力的！<br>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ——By  Andysun06</p><hr><h3 id="二、目录："><a href="#二、目录：" class="headerlink" title="二、目录："></a>二、目录：</h3><hr><ul><li><p>① 栈</p><ul><li>STL——栈的分析及用法</li><li>手写——栈的分析及用法（速度较快）</li></ul></li><li><p>② 队列</p><ul><li>STL——队列的分析及用法</li><li>手写——队列的分析及用法（速度较快）</li></ul></li><li><p>③ 快速幂</p><ul><li>3.1 算法分析</li><li>3.2 模板</li></ul></li><li><p>④ 线性筛</p><ul><li>4.1 算法分析</li><li>4.2 模板</li></ul></li><li><p>⑤ 并查集</p><ul><li>5.1 算法分析</li><li>5.2 模板</li></ul></li><li><p>⑥ C++随机数</p></li><li><p>⑦ 前缀和</p><ul><li>7.1 一维前嘴和</li><li>7.2 二维前缀和</li></ul><hr></li></ul><h3 id="三、算法笔记"><a href="#三、算法笔记" class="headerlink" title="三、算法笔记"></a>三、算法笔记</h3><h4 id="ㅤㅤㅤ-①-栈："><a href="#ㅤㅤㅤ-①-栈：" class="headerlink" title="ㅤㅤㅤ ① 栈："></a>ㅤㅤㅤ ① 栈：</h4><p>ㅤㅤㅤㅤㅤㅤ- STL——栈的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 包含栈的头文件：<code>#include&lt;stack&gt;</code>  。<br>ㅤㅤㅤㅤㅤㅤㅤ  2. 栈的特点：<strong>先进后出</strong>，与队列相反<br>ㅤㅤㅤㅤㅤㅤㅤ  3. 定义一个栈：<code>stack&lt;Type&gt; s;</code> 其中<code>Type</code>为数据类型。<br>ㅤㅤㅤㅤㅤㅤㅤ  4. 栈的主要操作：</p><pre class=" language-cpp"><code class="language-cpp">           s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将a压入栈顶</span>           s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除栈顶的元素，但不会返回</span>           s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回栈顶的元素，但不会删除</span>           s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回栈中元素的个数</span>           s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查栈是否为空，如果为空返回true，否则返回false</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  5. 栈的模板题练习：<a href="https://www.luogu.com.cn/problem/CF26B" target="_blank" rel="noopener">CF26B</a></p><p>ㅤㅤㅤㅤㅤㅤ- 手写——栈的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ   1. 难度不大，但比STL要更快。<br>ㅤㅤㅤㅤㅤㅤㅤ   2. 手写模板（具体作用见上面解释）：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           入栈：q<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>           出栈：n<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>           查栈顶：n<span class="token operator">=</span>q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ   3. 原理：用数组模拟栈的操作。</p><hr><h4 id="ㅤㅤㅤ-②-队列："><a href="#ㅤㅤㅤ-②-队列：" class="headerlink" title="ㅤㅤㅤ ② 队列："></a>ㅤㅤㅤ ② 队列：</h4><p>ㅤㅤㅤㅤㅤㅤ- STL——队列的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 包含队列的头文件：<code>#include&lt;queue&gt;</code>  。       </p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 队列的特点：<strong>先进先出</strong>，与栈相反   </p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 定义一个队列：<code>queue&lt;Type&gt; q;</code> 其中<code>Type</code>为数据类型。  </p><p>ㅤㅤㅤㅤㅤㅤㅤ  4. 队列的主要操作：</p><pre class=" language-cpp"><code class="language-cpp">           q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将a压入队列尾部</span>           q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除队首元素，但不返回</span>           q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队首元素，但不删除</span>           q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队尾元素，但不删除</span>           q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队列中元素的个数</span>           q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查队列是否为空，如果为空返回true，否则返回false</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  5. 队列的模板题练习：<a href="https://www.luogu.com.cn/problem/CF637B" target="_blank" rel="noopener">CF637B</a></p><p>ㅤㅤㅤㅤㅤㅤ- 手写——队列的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 难度不大，但比STL要更快。  </p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 手写模板（具体作用见上面解释）：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           入队：q<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>           出队首：q<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>           查队首：n<span class="token operator">=</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>原理：用数组模拟队列的操作。</p><hr><h4 id="ㅤㅤㅤ-③-快速幂："><a href="#ㅤㅤㅤ-③-快速幂：" class="headerlink" title="ㅤㅤㅤ ③ 快速幂："></a>ㅤㅤㅤ ③ 快速幂：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 快速幂用途：用于直接求一个数的 n 次幂会爆数据的题<br>ㅤㅤㅤㅤㅤㅤㅤ  2. 快速幂原理：具体见[这里](<a href="https://blog.csdn.net/henu111/article/details/81188659?ops_request_misc=%257B%2522request" target="_blank" rel="noopener">https://blog.csdn.net/henu111/article/details/81188659?ops_request_misc=%257B%2522request</a><br>%255Fid%2522%253A%2522158523255919726867821069%2522%252C%2522scm%2522%253A<br>%252220140713.130056874..<br>%2522%257D&amp;request_id=158523255919726867821069&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.n<br>one-task)</p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>base<span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断b的奇偶</span>                       ans<span class="token operator">*</span><span class="token operator">=</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当n为奇数时，乘以base（当前权值下的a）</span>                    base<span class="token operator">*</span><span class="token operator">=</span>base<span class="token punctuation">;</span>                    b<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于b/=2</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> ans<span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 快速幂的模板题练习：<a href="https://www.luogu.com.cn/problem/P1226" target="_blank" rel="noopener">P1226</a></p><hr><h4 id="ㅤㅤㅤ-④-线性筛："><a href="#ㅤㅤㅤ-④-线性筛：" class="headerlink" title="ㅤㅤㅤ ④ 线性筛："></a>ㅤㅤㅤ ④ 线性筛：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 线性筛用途：快速的求范围 n 内的所有素数，其时间复杂度小于暴力求素数。</p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 线性筛原理：具体见<a href="https://zhuanlan.zhihu.com/p/108674990" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">bool</span> isPrime<span class="token punctuation">[</span><span class="token number">100000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> Prime<span class="token punctuation">[</span><span class="token number">5000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">void</span> <span class="token function">GetPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">memset</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               isPrime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                       Prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       isPrime<span class="token punctuation">[</span>i<span class="token operator">*</span>Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                           <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main函数第一行加上  GetPrime(n)  n为范围</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 线性筛的模板题练习：<a href="https://www.luogu.com.cn/problem/P3383" target="_blank" rel="noopener">P3383</a></p><hr><h4 id="ㅤㅤㅤ-⑤-并查集："><a href="#ㅤㅤㅤ-⑤-并查集：" class="headerlink" title="ㅤㅤㅤ ⑤ 并查集："></a>ㅤㅤㅤ ⑤ 并查集：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1.并查集，顾名思义，就是有合并，查找等操作的集合。</p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 文档教程<a href="https://blog.csdn.net/low5252/article/details/90611503" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 视频教程<a href="https://www.bilibili.com/video/av26268911" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>           <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>           <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>           <span class="token keyword">int</span> <span class="token function">zhao</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来查找x的祖宗</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>                  <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">zhao</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">bool</span> <span class="token function">cha</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来判断x,y的祖宗是不是同一个人</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">zhao</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">zhao</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           <span class="token keyword">void</span> <span class="token function">bin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来合并x,y</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token function">zhao</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">zhao</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>               <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> z<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>                        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">bin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">else</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 本程序为并查集模板<a href="https://www.luogu.com.cn/problem/P3367" target="_blank" rel="noopener">P3367</a>的AC程序</p><hr><h4 id="ㅤㅤㅤ-⑥-C-随机数："><a href="#ㅤㅤㅤ-⑥-C-随机数：" class="headerlink" title="ㅤㅤㅤ ⑥ C++随机数："></a>ㅤㅤㅤ ⑥ C++随机数：</h4><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 随机数头文件 <code>#include &lt;cstdlib&gt;</code> 和 <code>#include&lt;ctime&gt;</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 使用宏定义 <code>#define random(a,b) (rand()%(b-a)+a)</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 在开头加上 <code>srand((int)time(0));</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  4. 最后，在程序中加入 <code>random(l,r);</code> 就可以求 l 到 r 之间的随机数了。</p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ  5.程序示范：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span>           <span class="token macro property">#<span class="token directive keyword">define</span> random(a,b) (rand()%(b-a)+a)</span>           <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>           <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 产生随机种子,把0换成NULL也行</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//此程序可以产生 5 到 10 之间的随机数</span></code></pre><hr><h4 id="ㅤㅤㅤ-⑦-前缀和："><a href="#ㅤㅤㅤ-⑦-前缀和：" class="headerlink" title="ㅤㅤㅤ ⑦ 前缀和："></a>ㅤㅤㅤ ⑦ 前缀和：</h4><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ-  首先介绍：前缀和是什么？ 答：个人认为其实就是一种预处理，可以大大降低时<br>间复杂度，是一种非常方便快捷的基础算法。</p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 一维前缀和：</p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ-  1.具体文章讲解<a href="https://blog.csdn.net/XT_NOI/article/details/72666275" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ- 二维前缀和：</p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ-  1.具体文章讲解<a href="https://blog.csdn.net/XT_NOI/article/details/72715904" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ-  个人认为一维前缀和思维难度，代码难度较低，几乎是一看就懂的感觉，二维组<br>要稍加思考，也比较容易。</p><hr><h3 id="四、友情链接"><a href="#四、友情链接" class="headerlink" title="四、友情链接"></a>四、友情链接</h3><ul><li><a href="\user\70299">作者个人主页</a></li><li><a href="https://www.luogu.com.cn/blog/andysun123/" target="_blank" rel="noopener">作者其他文章</a></li><li><a href="https://www.luogu.com.cn/team/25191" target="_blank" rel="noopener">XSLM 官方团队</a></li><li><a href="https://www.luogu.com.cn/team/23467" target="_blank" rel="noopener">猫国建设者 讨论群</a></li><li><a href="www.luogu.com.cn/user/153141">钺Programmer 的个人主页</a></li></ul><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>ㅤㅤ本文章已经接近尾声了，我很庆幸，你可以坚持看下来，这些东西都是我精心准备的，希望可以对你有帮<br>助。当然，如果你觉得这篇文章写得好，可以在下面评论，或者点赞。如果你觉得有错误，或者有建议，欢迎<br>私信我，或者加我的QQ：944898918 。最后，希望你可以继续努力，学习编程，加油！<br>  ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ——By  Andysun06</p><h3 id="六、有关本文章"><a href="#六、有关本文章" class="headerlink" title="六、有关本文章"></a>六、有关本文章</h3><ul><li>作者：@Andysun06</li><li>写作开始时间：2020/3/26</li><li>最近一次更新：2020/4/10</li><li>版本：V1.5</li><li>目前更新状况：未完待续……</li><li>其他：评论请统一为“Orz”</li></ul><hr><p>即将推出：</p><ul><li>图论——基础存图</li></ul><p>敬请期待</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
