<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CF847G-题解</title>
      <link href="/2020/05/02/cf847g-ti-jie/"/>
      <url>/2020/05/02/cf847g-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF847G-题解"><a href="#CF847G-题解" class="headerlink" title="CF847G 题解"></a>CF847G 题解</h2><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>一共有 $n$ 个小组，每个小组都有 7 个课程，有可能有两个或两个以上的小组同时上课，但是一个教室只可以装下一个小组，问你如果要让所有小组都可以在教室上课，一共需要多少个教室？    </p><p>上面的描述可能理解起来比较复杂，下面我来把他简化一下：</p><p>一共有 $n$ 行，每行7个数，让你求那一列的“1”最多，输出他的数量。</p><p>这样就很简单了，如果你还是不理解，可以继续看下面（会的话可以跳过下面这一段）：</p><p>比如样例二：</p><p>一共 $n$ 个小组（用√表示要上课）</p><table><thead><tr><th align="center"></th><th align="center">第1节课</th><th align="center">第2节课</th><th align="center">第3节课</th><th align="center">第4节课</th><th align="center">第5节课</th><th align="center">第6节课</th><th align="center">第7节课</th></tr></thead><tbody><tr><td align="center">小组1</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">小组2</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">小组3</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>我们可以发现，第七节课要上课的小组最多，有三个，所以输出是 <code>3</code>。</p><h3 id="题目难度："><a href="#题目难度：" class="headerlink" title="题目难度："></a>题目难度：</h3><p>个人认为是 <code>入门</code> 难度左右。</p><h3 id="题目做法："><a href="#题目做法：" class="headerlink" title="题目做法："></a>题目做法：</h3><p>我的代码可能比其他大佬写的题解的代码要慢一点，但是跟好理解一点。</p><p>首先，当然是输入一个 $n$ 和 $n$ 行字符数组（我比较喜欢用字符数组，其实字符串也没问题）：</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//输入 n 行</span>      cin<span class="token operator">>></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//也可以用 scanf，但要注意是‘%s’</span>   <span class="token punctuation">}</span></code></pre><p>输入之后，我们要用一个二维数组，来枚举每一列，用<code>max1</code>来记录最大值，代码如下：</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 7 列</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 n 行</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是‘1’就累加</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>max1<span class="token punctuation">)</span> max1<span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果大于了之前的最大值，则把 sum 赋给 max1</span>      sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记住每个循环之后要清 0</span>   <span class="token punctuation">}</span></code></pre><p>最后，就是输出了，就一个数，很简单。</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>max1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出</span></code></pre><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>max1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//max1 刚开始是要定义为 -1</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n 的最大值为 1000</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入 n 行</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">>></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//也可以用 scanf，但要注意是‘%s’</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 7 列</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 n 行</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是‘1’就累加</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>max1<span class="token punctuation">)</span> max1<span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果大于了之前的最大值，则把 sum 赋给 max1</span>      sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记住每个循环之后要清 0</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>max1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出</span><span class="token punctuation">}</span></code></pre><p>希望本题解对大家有帮助，也感谢管理员在百忙之中抽空为我审核题解，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF110B-题解</title>
      <link href="/2020/05/02/cf110b-ti-jie/"/>
      <url>/2020/05/02/cf110b-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF110B-题解"><a href="#CF110B-题解" class="headerlink" title="CF110B 题解"></a>CF110B 题解</h2><p>这题居然没有 Pascal 的题解，那我就写一篇吧。</p><h3 id="题目翻译-amp-做法分析："><a href="#题目翻译-amp-做法分析：" class="headerlink" title="题目翻译&amp;做法分析："></a>题目翻译&amp;做法分析：</h3><p>给定一个数 $n$ 让你输出满足这三个条件的字符串：</p><ul><li>整个字符串都由小写字母组成；</li><li>两个相同字母之间的距离为 4 或 7。</li><li>在满足以上条件的前提上，字符串尽量最小。</li></ul><p>然后我们就可以开始找规律，首先，字典序是最小的，那不就是 $a$,$b$,$c$,$d$…… 等等，按顺序来。</p><p>接着，我们画出一个表格：</p><p>先把字典序最小的 $a$ 填进去（注意：两个相同字母之间的距离为 4 或 7。） 为了字典序最小，所以肯定是字典序越小的字母越往前。</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">a</th><th align="center">……</th></tr></thead></table><p>照上面这样子填下去，发现有一个循环节 <code>a</code>+<code>bcda</code>+<code>bcda</code>+<code>bcda</code>+…… 那我们就可以开始写程序了。</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><ul><li><p>Pascal 代码：</p><pre class=" language-pas"><code class="language-pas">var n,i:longint;begin  read(n); //输入  for i:=0 to n-1 do //循环 n 次      write(chr(97+i mod 4)); //刚刚找到的规律end.</code></pre></li><li><p>C++ 代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环 n 次</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token operator">+</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//刚刚找到的规律</span><span class="token punctuation">}</span></code></pre></li></ul><p>提交结果显示，Pascal 的代码会比 C++ 慢 1~2 秒，但内存要更少。</p><p>希望本题解对大家有帮助，也感谢管理员在百忙之中帮助我审核题解，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《工作室微课堂》八年级综合实践第七课——《声音传感器》</title>
      <link href="/2020/05/02/ba-nian-ji-di-qi-ke/"/>
      <url>/2020/05/02/ba-nian-ji-di-qi-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="八年级综合实践第七课《声音传感器》"><a href="#八年级综合实践第七课《声音传感器》" class="headerlink" title="八年级综合实践第七课《声音传感器》"></a>八年级综合实践第七课《声音传感器》</h1><p><a href="https://mp.weixin.qq.com/s/Z7PWpbUZLN3LiEupm5mopQ" target="_blank" rel="noopener">课堂传送门</a></p><p><strong>本文章摘自《邓汉盘名师工作室》，版权归《邓汉盘名师工作室》所有，望周知</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邓汉盘名师工作室 </tag>
            
            <tag> 微课堂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF278A-题解</title>
      <link href="/2020/05/02/cf278a-ti-jie/"/>
      <url>/2020/05/02/cf278a-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF278A-题解"><a href="#CF278A-题解" class="headerlink" title="CF278A 题解"></a>CF278A 题解</h2><p>这题既然没有pascal题解，那我就来一篇</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>有 $n$ 个车站排成一个<strong>环形</strong>，给定 $n$ 个车站之间的距离，求从第$s$个车站到第 $t$ 个车站所需的最短距离。</p><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>也就是说，有一个这样的车站：</p><p><img src="https://i.loli.net/2020/05/01/i6pjY3a4hyAgNno.png" alt="1"></p><p>他可以这样走：</p><p><img src="https://i.loli.net/2020/05/01/C1y8PTSFVeHWnLE.png" alt="1"></p><p>也可以这样走：</p><p><img src="https://i.loli.net/2020/05/01/bC5XiJ6HIA8Bucs.png" alt="1"></p><p>现在告诉你：</p><ul><li>① 和 ② 的距离为 2</li><li>② 和 ③ 的距离为 3</li><li>③ 和 ④ 的距离为 1</li><li>④ 和 ① 的距离为 8</li></ul><p>也就是下面这种状况：</p><p><img src="https://i.loli.net/2020/05/01/GFHVh5N2ysExeR3.png" alt="1"></p><p>那有的人就想，我只要判断出那个路线距离短就可以了呀，那么请看下面：</p><p>你要从 ① 走到 ④，你会怎么走？</p><ul><li>是从 ① –&gt; ② –&gt; ③ –&gt; ④</li><li>还是 ① –&gt; ④</li></ul><p>很明显，当然是 ① –&gt; ② –&gt; ③ –&gt; ④ 要短一点，所以，路线短不一定距离短，好了，既然理解了题目和易错点，就要开始写程序了</p><h3 id="做法分析："><a href="#做法分析：" class="headerlink" title="做法分析："></a>做法分析：</h3><p>我们先用一个数组，把每个点之间的距离存下来，然后计算总路程</p><pre class=" language-pas"><code class="language-pas">read(n);   for i:=1 to n do   begin       read(f[i]);       sum:=sum+f[i];//计算总路程   end;</code></pre><p>然后输入 $s$ , $t$ 并且将小的放在前面</p><pre class=" language-pas"><code class="language-pas">if s>t then //如果s大于t，就将他们交换过来   begin        q:=s; //交换       s:=t;       t:=q;   end;</code></pre><p>再计算从 $s$ 到 $t$ 的路线距离，这时候可能有人问：不是要计算两条吗？</p><p>计算两条当然是可以的，但是我们之前已经计算了总长度，所以说，总长度 减去 $s$ 到 $t$ 的路线距离 就等于 另一条路线长度。</p><pre class=" language-pas"><code class="language-pas">for i:=s to t-1 do    k:=k+f[i];</code></pre><p>最后，只要一个判断输出，就可以了</p><pre class=" language-pas"><code class="language-pas">if k<(sum-k) then       writeln(k)   else       writeln(sum-k);</code></pre><p>下面是完整代码：</p><pre><code>var n,s,t,sum,k,i,q:longint;    f:array [1..102] of longint;Begin   read(n);   for i:=1 to n do   begin       read(f[i]);       sum:=sum+f[i];   end;   read(s,t);   if s&gt;t then   begin        q:=s;       s:=t;       t:=q;   end;   for i:=s to t-1 do       k:=k+f[i];   if k&lt;(sum-k) then       writeln(k)   else       writeln(sum-k);end.</code></pre><p>希望本题解对大家有帮助，也感谢管理员百忙之中帮我审核题解，谢谢！</p><p>End.</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF485A-题解</title>
      <link href="/2020/05/02/cf485a-ti-jie/"/>
      <url>/2020/05/02/cf485a-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF485A-题解"><a href="#CF485A-题解" class="headerlink" title="CF485A 题解"></a>CF485A 题解</h2><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>这个题的题面看得有点复杂（可能只有我这个蒟蒻觉得），但其实只要仔细思考一下，很容易就发现，这题的意思就是输入一个数 $n$，然后再枚举多次，如果在枚举的时候发现了 $a%m==0$ 就直接输出 <code>Yes</code> 并且退出，否则 $a$ 一直加  $a%m$ ，如果枚举到最后，还是没有退出程序，就输出 <code>No</code></p><h3 id="题目难度："><a href="#题目难度：" class="headerlink" title="题目难度："></a>题目难度：</h3><p>个人认为在入门难度左右</p><h3 id="做法分析："><a href="#做法分析：" class="headerlink" title="做法分析："></a>做法分析：</h3><p>在题目分析我们已经说到了是输入两个数 $n,m$，然后再枚举多次（我选的是 $m+100$,但在我看别的题解释，$m+10$ 也可以），如果在枚举的时候发现了 $ a%m==0 $ 就直接输出 <code>Yes</code> 并且退出，否则 $a$ 一直加 $a%m$ 。如果枚举完了还没有退出，就证明不会有停止生产的情况，输出 <code>No</code> 就好了。</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><pre><code>#include&lt;cstdio&gt;#include&lt;iostream&gt;long long a,m; //注意，a,m 一定要用long long不然会爆int i;int main() {    scanf(&quot;%lld%lld&quot;,&amp;a,&amp;m); //输入，注意要用%lld    if(a%m==0) { //如果刚开始时就会停产，直接输出&quot;Yes&quot;        puts(&quot;Yes&quot;);        return 0;    }    for(i=1; i&lt;=m+100; i++) { //暴力枚举多次        a+=a%m;        if(a%m==0) {  //如果有a%m==0的情况，直接输出&quot;Yes&quot;            puts(&quot;Yes&quot;);            return 0; //记住要跳出        }    }    puts(&quot;No&quot;); //枚举完了还没有退出，就输出&quot;No&quot;}</code></pre><p>希望本题解对大家有帮助，也感谢管理员百忙之中为我审核题解，谢谢！</p><p>2020/3/14 修改爆掉的LaTeX。</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF278A-题解</title>
      <link href="/2020/05/02/cf701b-ti-jie/"/>
      <url>/2020/05/02/cf701b-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF701B-题解"><a href="#CF701B-题解" class="headerlink" title="CF701B 题解"></a>CF701B 题解</h2><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>这道题是给出了一个棋盘，大小为 $n×n$ 并且里面有 $m$ 个棋子，每个棋子可以攻击与他同一行，列的位置，并且 $n$ 和 $m$ 都很大，数据范围为 ( $1 \leq n \leq 100000, 1 \leq m \leq min(100000,n^{2} )$)。我们要输出每放一个棋子后，有多少个地方是攻击不到的。</p><h3 id="题目难度："><a href="#题目难度：" class="headerlink" title="题目难度："></a>题目难度：</h3><p>个人认为在 普及/提高- 左右。</p><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h3><p>当看到这题的第一眼，我就想到了二维数组模拟，但是，在看了数据范围之后，发现行不通，二维数组绝对会爆，于是我就想到了 $stl$ 中的 $set$ 成员函数，下面我们来介绍一下什么是 $set$：</p><ul><li>定义 $set$：</li></ul><blockquote><p>格式：$set &lt;value_type&gt; name;$</p><p>其中 $value_type$ 是 $set$ 中所要存储的元素类型，例如 <code>int</code>,<code>string</code>,或自定义的结构体名称。</p><p>定义 $set$ 还要包含 $set$ 头文件，即 <code>#include&lt;set&gt;</code>。</p></blockquote><ul><li>介绍 $set$</li></ul><blockquote><p>$set$ 的内部实现其实是一棵红黑树，<code>int</code>，<code>string</code> 等C++自带变量类型已经帮我们定义好了小于号，也就是他会自动帮我们进行排序，其中 <code>int</code> 在 $set$ 中从小到大排，<code>string</code> 在 $set$ 中按字典序排。</p></blockquote><ul><li>使用 $set$</li></ul><blockquote><p>$set$ 有众多的内置函数，包括 <code>insert(x)</code>,<code>erase(x)</code>,<code>empty()</code>,<code>size()</code>,<code>clear()</code>,<code>find(x)</code> 等等，下面让我们来介绍一下这些内置函数的作用。</p><p>1.<code>insert(x)</code>/<code>erase(x)</code> 是在 $set$ 中 <strong>插入/删除</strong> 一个元素 $x$。</p><p>2.<code>empty()</code>/<code>size()</code> 是判断 $set$ 是否为空/返回 $set$ 的元素个数。</p><p>3.<code>clear()</code> 清空一个 $set$ 的所有元素。</p><p>4.<code>find(x)</code> 查找 $set$ 中是否有 $x$ 这个元素。</p></blockquote><p>了解了 $set$ 函数之后，就可以开始编写我们的程序了。</p><h3 id="完整代码-amp-解析："><a href="#完整代码-amp-解析：" class="headerlink" title="完整代码&amp;解析："></a>完整代码&amp;解析：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span> </span><span class="token comment" spellcheck="true">//包含 set 的头文件</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义 long long 变量</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   set<span class="token operator">&lt;</span>ll<span class="token operator">></span> set1<span class="token punctuation">,</span>set2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个 $set$</span>   set1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把两个 $set$ 函数清空，具体见上面</span>   set2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入，注意要用 %lld</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入，注意要用 %lld</span>      set1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入一个元素a</span>      set2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入一个元素b</span>      ll len1<span class="token operator">=</span>set1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len2<span class="token operator">=</span>set2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把 set1 和 set2 的长度分别赋值给 len1 和 len2</span>      ans<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">-</span>len2<span class="token operator">*</span>n<span class="token operator">-</span>n<span class="token operator">*</span>len1<span class="token operator">+</span>len1<span class="token operator">*</span>len2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用公式计算答案 ans</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出，注意要用 %lld</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>希望本题解对大家有帮助，也感谢管理员百忙之中抽空为我审核题解，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yorg.io游戏攻略</title>
      <link href="/2020/05/01/yorg-io-gong-lue/"/>
      <url>/2020/05/01/yorg-io-gong-lue/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="864a54aa1d2b27f388d2ccc82c0fa7698ff4351768f97d8e3cfc65b10d1482bc"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 灌水版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题反馈</title>
      <link href="/2020/04/29/blog-question/"/>
      <url>/2020/04/29/blog-question/</url>
      
        <content type="html"><![CDATA[<h3 id="众所周知，本博客从搭建至今时间很短，存在很多的问题，所以特意创建此贴，如果有问题可以在下面反馈。"><a href="#众所周知，本博客从搭建至今时间很短，存在很多的问题，所以特意创建此贴，如果有问题可以在下面反馈。" class="headerlink" title="众所周知，本博客从搭建至今时间很短，存在很多的问题，所以特意创建此贴，如果有问题可以在下面反馈。"></a>众所周知，本博客从搭建至今时间很短，存在很多的问题，所以特意创建此贴，如果有问题可以在下面反馈。</h3><h4 id="有特殊情况，无法在下面说明的可以按照下面方式联系我："><a href="#有特殊情况，无法在下面说明的可以按照下面方式联系我：" class="headerlink" title="有特殊情况，无法在下面说明的可以按照下面方式联系我："></a>有特殊情况，无法在下面说明的可以按照下面方式联系我：</h4><ul><li>QQ：944898918</li><li>邮箱：<a href="mailto:944898918@qq.com">944898918@qq.com</a></li><li>洛谷私信：Andysun06          </li></ul><p>感谢您的贡献！</p>]]></content>
      
      
      <categories>
          
          <category> 站务版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反馈 </tag>
            
            <tag> 站务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言简介</title>
      <link href="/2020/04/29/c-yu-yan-jian-jie/"/>
      <url>/2020/04/29/c-yu-yan-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><ul><li><p>什么是信息学奥林匹克竞赛</p></li><li><p>什么是C++语言</p></li><li><p>C++语言特点</p></li><li><p>C++语言标准</p></li><li><p>C++语言工作原理</p></li><li><p>安装DEV C++</p></li><li><p>推荐书籍</p></li></ul><h2 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h2><h3 id="1-信息学奥林匹克竞赛"><a href="#1-信息学奥林匹克竞赛" class="headerlink" title="1. 信息学奥林匹克竞赛"></a>1. 信息学奥林匹克竞赛</h3><ul><li><p>信息学奥林匹克竞赛是一项<strong>益智性</strong>的<strong>竞赛活动</strong>，核心是考查选手的智力和使用计算机解题的能力，选手首先应针对竞赛题目的要求构建数学模型，进而构造出计算机可以接受的算法，之后编写出计算机能够执行的程序。</p></li><li><p><strong>程序设计</strong>是信息学竞赛的<strong>基本</strong>，选手参与竞赛活动的第一步是熟练掌握一门程序设计语言，目前竞赛中允许使用的程序设计语言有 <code>C语言</code>、<code>C++</code>、<code>Pascal</code>。</p></li></ul><h3 id="2-初步了解C-语言"><a href="#2-初步了解C-语言" class="headerlink" title="2. 初步了解C++语言"></a>2. 初步了解C++语言</h3><ul><li><p>C++ 是一种<strong>静态类型</strong>的、编译式的、通用的、大小写敏感的、不规则的<strong>编程语言</strong>，是面向对象的一个较为优秀的语言</p></li><li><p>C++ 被大众认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p></li><li><p>C++ 是 C语言 的一种升级版，由 Bjarne Stroustrup 和他的团队开发</p></li><li><p>虽然 C++ 是 C语言 的一个升级版，事实上，合法的 C 程序在 C++ 上编译都没有问题。</p></li></ul><h3 id="3-C-工作特点"><a href="#3-C-工作特点" class="headerlink" title="3. C++工作特点"></a>3. C++工作特点</h3><ul><li><p>支持数据封装和数据隐藏</p></li><li><p>支持继承和重用</p></li><li><p>支持多态性</p></li></ul><p>这几种特点使他在各种编程语言中脱颖而出，成为大众所认可的编程语言。</p><h3 id="4-C-语言标准"><a href="#4-C-语言标准" class="headerlink" title="4. C++语言标准"></a>4. C++语言标准</h3><ul><li><p>C++ 98 标准<br>C++标准第一版，1998年发布。正式名称为ISO/IEC 14882:1998。</p></li><li><p>C++ 03 标准<br>C++标准第二版，2003年发布。正式名称为ISO/IEC 14882:2003。</p></li><li><p>C++ 11 标准<br>C++标准第三版，2011年8月12日发布。正式名称为ISO/IEC 14882:2011。<br>C++11对容器类的方法做了三项主要修改。</p></li><li><p>C++ 14 标准<br>C++标准第四版，2014年8月18日发布。正式名称为ISO/IEC 14882:2014</p></li></ul><h3 id="5-C-工作原理"><a href="#5-C-工作原理" class="headerlink" title="5. C++工作原理"></a>5. C++工作原理</h3><p>你在DEVC++上编写一个程序，他是如何运行的呢？</p><ul><li><p>第一步是对程序进行编译，这需要用到他安装时自带的编译器。编译器将C++语句转换成机器码(即为可以被电脑运行的exe程序)；如果这个步骤成功，则进行下一步。</p></li><li><p>下一步就是对程序进行链接，这需要用到链接器。链接器将编译获得机器码与C++库中的代码进行合并。C++库包含了执行某些常见任务的函数。例如，一个C++库中包含标准的平方根函数sqrt，所以不必亲自计算平方根。C++库中还包含一些子程序，它们把数据发送到显示器，并知道如何读写硬盘上的数据文件。</p></li></ul><h3 id="6-DEVC-下载并安装"><a href="#6-DEVC-下载并安装" class="headerlink" title="6. DEVC++下载并安装"></a>6. DEVC++下载并安装</h3><ul><li>第一步，打开DEVC++<a href="https://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">官网</a></li></ul><p><img src="https://i.loli.net/2020/04/29/YlW421gV3H8hMLC.png" alt="1"></p><ul><li><p>第二步，点击绿色的按钮【Download】</p></li><li><p>第三步，等5秒，会自动下载</p></li><li><p>第四步，找到下载的exe文件，双击打开</p></li><li><p>默认为英文，也可以自行修改，等它自动安装完成，你就会发现桌面上有了这个图标</p></li></ul><p><img src="https://i.loli.net/2020/04/29/wEuLhI7J8lmQB6g.png" alt="1"></p><ul><li>双击打开即可，恭喜你成功安装了DEVC++</li></ul><h3 id="7-推荐书籍"><a href="#7-推荐书籍" class="headerlink" title="7.推荐书籍"></a>7.推荐书籍</h3><h4 id="入门书籍"><a href="#入门书籍" class="headerlink" title="入门书籍"></a>入门书籍</h4><p>《信息学奥赛一本通C++版》</p><p>《C++程序设计教程》</p><p>《大话设计模式》</p><p>《C++编程规范:101条规则、准则与最佳实践》</p><p>《C和C++程序员面试秘籍》</p><h4 id="进阶书籍"><a href="#进阶书籍" class="headerlink" title="进阶书籍"></a>进阶书籍</h4><p>《C++程序设计语言》英文第四版</p><p>《C++ Primer 第5版（英文版）》</p><p>《C++标准库：自学教程与参考手册（第2版）（英文版）》</p><p>《C++ Concurrency in Action|C++ 并发实战》</p><p>《C和C++安全编码（第2版）（英文版）》</p><hr><p>喜欢的话记得点赞哦</p><p>部分内容参考：</p><ul><li>DEVC++百度百科</li><li>C++简介 菜鸟教程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2020/04/28/learning-notes/"/>
      <url>/2020/04/28/learning-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="蒟蒻Andysun06的学习笔记"><a href="#蒟蒻Andysun06的学习笔记" class="headerlink" title="蒟蒻Andysun06的学习笔记"></a>蒟蒻Andysun06的学习笔记</h2><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ本文章未经博主许可，不能转载！</p><h4 id="本文章同步发表于："><a href="#本文章同步发表于：" class="headerlink" title="本文章同步发表于："></a>本文章同步发表于：</h4><ul><li><a href="https://www.luogu.com.cn/blog/andysun123/Learning-notes" target="_blank" rel="noopener">洛谷博客</a></li><li><a href="https://blog.csdn.net/a_n_d_y_s_u_n__/article/details/105159775" target="_blank" rel="noopener">CSDN博客</a></li><li><a href="https://www.zybuluo.com/Andysun06/note/1687658" target="_blank" rel="noopener">作业部落博客</a></li><li><a href="https://oiblog.blog.luogu.org/Learning-notes" target="_blank" rel="noopener">小号博客</a></li></ul><hr><h3 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h3><p>ㅤㅤ本文章是蒟蒻我独立创作的，大部分内容都是基础，还包括一些其他东西的用法（例如随机数），本文章<br>所涉及的知识大部分都是自学的（因为还没找到适合我的老师）。还有一部分，是@[FCBM71]<br>(<a href="https://www.luogu.com.cn/user/45176" target="_blank" rel="noopener">https://www.luogu.com.cn/user/45176</a>) 和@<a href="https://www.luogu.com.cn/user/227514" target="_blank" rel="noopener">jijidawang</a> 等大<br>佬教我的，我在此感谢他们对我的教导，希望我可以和他们共同努力，变得更厉害，也谢谢广大谷友对我的帮<br>助和支持，我会继续努力的！<br>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ——By  Andysun06</p><hr><h3 id="二、目录："><a href="#二、目录：" class="headerlink" title="二、目录："></a>二、目录：</h3><hr><ul><li><p>① 栈</p><ul><li>STL——栈的分析及用法</li><li>手写——栈的分析及用法（速度较快）</li></ul></li><li><p>② 队列</p><ul><li>STL——队列的分析及用法</li><li>手写——队列的分析及用法（速度较快）</li></ul></li><li><p>③ 快速幂</p><ul><li>3.1 算法分析</li><li>3.2 模板</li></ul></li><li><p>④ 线性筛</p><ul><li>4.1 算法分析</li><li>4.2 模板</li></ul></li><li><p>⑤ 并查集</p><ul><li>5.1 算法分析</li><li>5.2 模板</li></ul></li><li><p>⑥ C++随机数</p></li><li><p>⑦ 前缀和</p><ul><li>7.1 一维前嘴和</li><li>7.2 二维前缀和</li></ul><hr></li></ul><h3 id="三、算法笔记"><a href="#三、算法笔记" class="headerlink" title="三、算法笔记"></a>三、算法笔记</h3><h4 id="ㅤㅤㅤ-①-栈："><a href="#ㅤㅤㅤ-①-栈：" class="headerlink" title="ㅤㅤㅤ ① 栈："></a>ㅤㅤㅤ ① 栈：</h4><p>ㅤㅤㅤㅤㅤㅤ- STL——栈的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 包含栈的头文件：<code>#include&lt;stack&gt;</code>  。<br>ㅤㅤㅤㅤㅤㅤㅤ  2. 栈的特点：<strong>先进后出</strong>，与队列相反<br>ㅤㅤㅤㅤㅤㅤㅤ  3. 定义一个栈：<code>stack&lt;Type&gt; s;</code> 其中<code>Type</code>为数据类型。<br>ㅤㅤㅤㅤㅤㅤㅤ  4. 栈的主要操作：</p><pre class=" language-cpp"><code class="language-cpp">           s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将a压入栈顶</span>           s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除栈顶的元素，但不会返回</span>           s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回栈顶的元素，但不会删除</span>           s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回栈中元素的个数</span>           s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查栈是否为空，如果为空返回true，否则返回false</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  5. 栈的模板题练习：<a href="https://www.luogu.com.cn/problem/CF26B" target="_blank" rel="noopener">CF26B</a></p><p>ㅤㅤㅤㅤㅤㅤ- 手写——栈的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ   1. 难度不大，但比STL要更快。<br>ㅤㅤㅤㅤㅤㅤㅤ   2. 手写模板（具体作用见上面解释）：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           入栈：q<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>           出栈：n<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>           查栈顶：n<span class="token operator">=</span>q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ   3. 原理：用数组模拟栈的操作。</p><hr><h4 id="ㅤㅤㅤ-②-队列："><a href="#ㅤㅤㅤ-②-队列：" class="headerlink" title="ㅤㅤㅤ ② 队列："></a>ㅤㅤㅤ ② 队列：</h4><p>ㅤㅤㅤㅤㅤㅤ- STL——队列的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 包含队列的头文件：<code>#include&lt;queue&gt;</code>  。       </p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 队列的特点：<strong>先进先出</strong>，与栈相反   </p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 定义一个队列：<code>queue&lt;Type&gt; q;</code> 其中<code>Type</code>为数据类型。  </p><p>ㅤㅤㅤㅤㅤㅤㅤ  4. 队列的主要操作：</p><pre class=" language-cpp"><code class="language-cpp">           q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将a压入队列尾部</span>           q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除队首元素，但不返回</span>           q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队首元素，但不删除</span>           q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队尾元素，但不删除</span>           q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队列中元素的个数</span>           q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查队列是否为空，如果为空返回true，否则返回false</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  5. 队列的模板题练习：<a href="https://www.luogu.com.cn/problem/CF637B" target="_blank" rel="noopener">CF637B</a></p><p>ㅤㅤㅤㅤㅤㅤ- 手写——队列的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 难度不大，但比STL要更快。  </p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 手写模板（具体作用见上面解释）：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           入队：q<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>           出队首：q<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>           查队首：n<span class="token operator">=</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>原理：用数组模拟队列的操作。</p><hr><h4 id="ㅤㅤㅤ-③-快速幂："><a href="#ㅤㅤㅤ-③-快速幂：" class="headerlink" title="ㅤㅤㅤ ③ 快速幂："></a>ㅤㅤㅤ ③ 快速幂：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 快速幂用途：用于直接求一个数的 n 次幂会爆数据的题<br>ㅤㅤㅤㅤㅤㅤㅤ  2. 快速幂原理：具体见<a href="https://blog.csdn.net/henu111/article/details/81188659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158523255919726867821069%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&request_id=158523255919726867821069&biz_id=0&utm_source=distribute.pc_search_result.none-task" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>base<span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断b的奇偶</span>                       ans<span class="token operator">*</span><span class="token operator">=</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当n为奇数时，乘以base（当前权值下的a）</span>                    base<span class="token operator">*</span><span class="token operator">=</span>base<span class="token punctuation">;</span>                    b<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于b/=2</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> ans<span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 快速幂的模板题练习：<a href="https://www.luogu.com.cn/problem/P1226" target="_blank" rel="noopener">P1226</a></p><hr><h4 id="ㅤㅤㅤ-④-线性筛："><a href="#ㅤㅤㅤ-④-线性筛：" class="headerlink" title="ㅤㅤㅤ ④ 线性筛："></a>ㅤㅤㅤ ④ 线性筛：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 线性筛用途：快速的求范围 n 内的所有素数，其时间复杂度小于暴力求素数。</p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 线性筛原理：具体见<a href="https://zhuanlan.zhihu.com/p/108674990" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">bool</span> isPrime<span class="token punctuation">[</span><span class="token number">100000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> Prime<span class="token punctuation">[</span><span class="token number">5000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">void</span> <span class="token function">GetPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">memset</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               isPrime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                       Prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       isPrime<span class="token punctuation">[</span>i<span class="token operator">*</span>Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                           <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main函数第一行加上  GetPrime(n)  n为范围</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 线性筛的模板题练习：<a href="https://www.luogu.com.cn/problem/P3383" target="_blank" rel="noopener">P3383</a></p><hr><h4 id="ㅤㅤㅤ-⑤-并查集："><a href="#ㅤㅤㅤ-⑤-并查集：" class="headerlink" title="ㅤㅤㅤ ⑤ 并查集："></a>ㅤㅤㅤ ⑤ 并查集：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1.并查集，顾名思义，就是有合并，查找等操作的集合。</p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 文档教程<a href="https://blog.csdn.net/low5252/article/details/90611503" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 视频教程<a href="https://www.bilibili.com/video/av26268911" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>           <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>           <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>           <span class="token keyword">int</span> <span class="token function">zhao</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来查找x的祖宗</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>                  <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">zhao</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">bool</span> <span class="token function">cha</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来判断x,y的祖宗是不是同一个人</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">zhao</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">zhao</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           <span class="token keyword">void</span> <span class="token function">bin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来合并x,y</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token function">zhao</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">zhao</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>               <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> z<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>                        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">bin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">else</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 本程序为并查集模板<a href="https://www.luogu.com.cn/problem/P3367" target="_blank" rel="noopener">P3367</a>的AC程序</p><hr><h4 id="ㅤㅤㅤ-⑥-C-随机数："><a href="#ㅤㅤㅤ-⑥-C-随机数：" class="headerlink" title="ㅤㅤㅤ ⑥ C++随机数："></a>ㅤㅤㅤ ⑥ C++随机数：</h4><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 随机数头文件 <code>#include &lt;cstdlib&gt;</code> 和 <code>#include&lt;ctime&gt;</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 使用宏定义 <code>#define random(a,b) (rand()%(b-a)+a)</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 在开头加上 <code>srand((int)time(0));</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  4. 最后，在程序中加入 <code>random(l,r);</code> 就可以求 l 到 r 之间的随机数了。</p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ  5.程序示范：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span>           <span class="token macro property">#<span class="token directive keyword">define</span> random(a,b) (rand()%(b-a)+a)</span>           <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>           <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 产生随机种子,把0换成NULL也行</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//此程序可以产生 5 到 10 之间的随机数</span></code></pre><hr><h4 id="ㅤㅤㅤ-⑦-前缀和："><a href="#ㅤㅤㅤ-⑦-前缀和：" class="headerlink" title="ㅤㅤㅤ ⑦ 前缀和："></a>ㅤㅤㅤ ⑦ 前缀和：</h4><ul><li>首先介绍：前缀和是什么？ 答：个人认为其实就是一种预处理，可以大大降低时<br>间复杂度，是一种非常方便快捷的基础算法。</li></ul><ul><li><p>一维前缀和：具体文章讲解<a href="https://blog.csdn.net/XT_NOI/article/details/72666275" target="_blank" rel="noopener">这里</a></p></li><li><p>二维前缀和：具体文章讲解<a href="https://blog.csdn.net/XT_NOI/article/details/72715904" target="_blank" rel="noopener">这里</a></p></li></ul><ul><li>个人认为一维前缀和思维难度，代码难度较低，几乎是一看就懂的感觉，二维组<br>要稍加思考，也比较容易。</li></ul><hr><h3 id="四、友情链接"><a href="#四、友情链接" class="headerlink" title="四、友情链接"></a>四、友情链接</h3><ul><li><a href="\user\70299">作者个人主页</a></li><li><a href="https://www.luogu.com.cn/blog/andysun123/" target="_blank" rel="noopener">作者其他文章</a></li><li><a href="https://www.luogu.com.cn/team/25191" target="_blank" rel="noopener">XSLM 官方团队</a></li><li><a href="https://www.luogu.com.cn/team/23467" target="_blank" rel="noopener">猫国建设者 讨论群</a></li><li><a href="www.luogu.com.cn/user/153141">钺Programmer 的个人主页</a></li></ul><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>ㅤㅤ本文章已经接近尾声了，我很庆幸，你可以坚持看下来，这些东西都是我精心准备的，希望可以对你有帮<br>助。当然，如果你觉得这篇文章写得好，可以在下面评论，或者点赞。如果你觉得有错误，或者有建议，欢迎<br>私信我，或者加我的QQ：944898918 。最后，希望你可以继续努力，学习编程，加油！<br>  ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ——By  Andysun06</p><h3 id="六、有关本文章"><a href="#六、有关本文章" class="headerlink" title="六、有关本文章"></a>六、有关本文章</h3><ul><li>作者：@Andysun06</li><li>写作开始时间：2020/3/26</li><li>最近一次更新：2020/4/10</li><li>版本：V1.5</li><li>目前更新状况：未完待续……</li><li>其他：评论请统一为“Orz”</li></ul><hr><p>即将推出：</p><ul><li>图论——基础存图</li></ul><p>敬请期待</p>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
