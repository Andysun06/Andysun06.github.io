<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>testlib.h库用法教程</title>
      <link href="/2020/06/06/testlib.h-ku-yong-fa-zhi-dao/"/>
      <url>/2020/06/06/testlib.h-ku-yong-fa-zhi-dao/</url>
      
        <content type="html"><![CDATA[<p>关于testlib.h库，详见<a href="https://oi-wiki.org/intro/testlib/" target="_blank" rel="noopener">这里</a></p><p>相信大家看了之后，会很想试试看什么效果，小编也是这样，于是试了一下，并把操作方法和注意事项写在了这里，希望对大家有帮助！</p><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>在桌面新建一个文本文档，命名为：testlib</p><p><img src="https://i.loli.net/2020/06/06/E9xYBgMDPnaO5ZR.png" alt="新建名字为testlib的文本文档"></p><p>注意事项：</p><ul><li>不要带后缀名，直接就是testlib，而不是testlib.txt</li></ul><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>把以下代码复制到testlib里</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * It is strictly recommended to include "testlib.h" before any other include  * in your code. In this case testlib overrides compiler specific "random()". * * If you can't compile your code and compiler outputs something about  * ambiguous call of "random_shuffle", "rand" or "srand" it means that  * you shouldn't use them. Use "shuffle", and "rnd.next()" instead of them * because these calls produce stable result for any C++ compiler. Read  * sample generator sources for clarification. * * Please read the documentation for class "random_t" and use "rnd" instance in * generators. Probably, these sample calls will be usefull for you: *              rnd.next(); rnd.next(100); rnd.next(1, 2);  *              rnd.next(3.14); rnd.next("[a-z]{1,100}"). * * Also read about wnext() to generate off-center random distribution. * * See https://github.com/MikeMirzayanov/testlib/ to get latest version or bug tracker. */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _TESTLIB_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _TESTLIB_H_</span><span class="token comment" spellcheck="true">/* * Copyright (c) 2005-2020 */</span><span class="token macro property">#<span class="token directive keyword">define</span> VERSION "0.9.32-SNAPSHOT"</span><span class="token comment" spellcheck="true">/*  * Mike Mirzayanov * * This material is provided "as is", with absolutely no warranty expressed * or implied. Any use is at your own risk. * * Permission to use or copy this software for any purpose is hereby granted  * without fee, provided the above notices are retained on all copies. * Permission to modify the code and to distribute modified code is granted, * provided the above notices are retained, and a notice that the code was * modified is included with the above copyright notice. * */</span><span class="token comment" spellcheck="true">/* NOTE: This file contains testlib library for C++. * *   Check, using testlib running format: *     check.exe &lt;Input_File> &lt;Output_File> &lt;Answer_File> [&lt;Result_File> [-appes]], *   If result file is specified it will contain results. * *   Validator, using testlib running format:                                           *     validator.exe &lt; input.txt, *   It will return non-zero exit code and writes message to standard output. * *   Generator, using testlib running format:                                           *     gen.exe [parameter-1] [parameter-2] [... paramerter-n] *   You can write generated test(s) into standard output or into the file(s). * *   Interactor, using testlib running format:                                           *     interactor.exe &lt;Input_File> &lt;Output_File> [&lt;Answer_File> [&lt;Result_File> [-appes]]], *   Reads test from inf (mapped to args[1]), writes result to tout (mapped to argv[2], *   can be judged by checker later), reads program output from ouf (mapped to stdin), *   writes output to program via stdout (use cout, printf, etc). */</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>latestFeatures<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"rnd.partition(size, sum[, min_part=0]) returns random (unsorted) partition which is a representation of the given `sum` as a sum of `size` non-negative integers"</span><span class="token punctuation">,</span>        <span class="token string">"rnd.distinct(size, n) and rnd.distinct(size, from, to)"</span><span class="token punctuation">,</span>        <span class="token string">"opt&lt;bool>(\"some_missing_key\") returns false now"</span><span class="token punctuation">,</span>        <span class="token string">"has_opt(key)"</span><span class="token punctuation">,</span>        <span class="token string">"Abort validator on validator.testset()/validator.group() if registered without using command line"</span><span class="token punctuation">,</span>        <span class="token string">"Print integer range violations in a human readable way like `violates the range [1, 10^9]`"</span><span class="token punctuation">,</span>        <span class="token string">"Opts supported: use them like n = opt&lt;int>(\"n\"), in a command line you can use an exponential notation"</span><span class="token punctuation">,</span>        <span class="token string">"Reformatted"</span><span class="token punctuation">,</span>        <span class="token string">"Use setTestCase(i) or unsetTestCase() to support test cases (you can use it in any type of program: generator, interactor, validator or checker)"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue #87: readStrictDouble accepts \"-0.00\""</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue #83: added InStream::quitif(condition, ...)"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue #79: fixed missed guard against repeated header include"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue #80: fixed UB in case of huge quitf message"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue #84: added readXs(size, indexBase = 1)"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed stringstream repeated usage issue"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed compilation in g++ (for std=c++03)"</span><span class="token punctuation">,</span>        <span class="token string">"Batch of println functions (support collections, iterator ranges)"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced rnd.perm(size, first = 0) to generate a `first`-indexed permutation"</span><span class="token punctuation">,</span>        <span class="token string">"Allow any whitespace in readInts-like functions for non-validators"</span><span class="token punctuation">,</span>        <span class="token string">"Ignore 4+ command line arguments ifdef EJUDGE"</span><span class="token punctuation">,</span>        <span class="token string">"Speed up of vtos"</span><span class="token punctuation">,</span>        <span class="token string">"Show line number in validators in case of incorrect format"</span><span class="token punctuation">,</span>        <span class="token string">"Truncate huge checker/validator/interactor message"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue with readTokenTo of very long tokens, now aborts with _pe/_fail depending of a stream type"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced InStream::ensure/ensuref checking a condition, returns wa/fail depending of a stream type"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed compilation in VS 2015+"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced space-separated read functions: readWords/readTokens, multilines read functions: readStrings/readLines"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced space-separated read functions: readInts/readIntegers/readLongs/readUnsignedLongs/readDoubles/readReals/readStrictDoubles/readStrictReals"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced split/tokenize functions to separate string by given char"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced InStream::readUnsignedLong and InStream::readLong with unsigned long long paramerters"</span><span class="token punctuation">,</span>        <span class="token string">"Supported --testOverviewLogFileName for validator: bounds hits + features"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed UB (sequence points) in random_t"</span><span class="token punctuation">,</span>        <span class="token string">"POINTS_EXIT_CODE returned back to 7 (instead of 0)"</span><span class="token punctuation">,</span>        <span class="token string">"Removed disable buffers for interactive problems, because it works unexpectedly in wine"</span><span class="token punctuation">,</span>        <span class="token string">"InStream over string: constructor of InStream from base InStream to inherit policies and std::string"</span><span class="token punctuation">,</span>        <span class="token string">"Added expectedButFound quit function, examples: expectedButFound(_wa, 10, 20), expectedButFound(_fail, ja, pa, \"[n=%d,m=%d]\", n, m)"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed incorrect interval parsing in patterns"</span><span class="token punctuation">,</span>        <span class="token string">"Use registerGen(argc, argv, 1) to develop new generator, use registerGen(argc, argv, 0) to compile old generators (originally created for testlib under 0.8.7)"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced disableFinalizeGuard() to switch off finalization checkings"</span><span class="token punctuation">,</span>        <span class="token string">"Use join() functions to format a range of items as a single string (separated by spaces or other separators)"</span><span class="token punctuation">,</span>        <span class="token string">"Use -DENABLE_UNEXPECTED_EOF to enable special exit code (by default, 8) in case of unexpected eof. It is good idea to use it in interactors"</span><span class="token punctuation">,</span>        <span class="token string">"Use -DUSE_RND_AS_BEFORE_087 to compile in compatibility mode with random behavior of versions before 0.8.7"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed bug with nan in stringToDouble"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issue around overloads for size_t on x64"</span><span class="token punctuation">,</span>        <span class="token string">"Added attribute 'points' to the XML output in case of result=_points"</span><span class="token punctuation">,</span>        <span class="token string">"Exit codes can be customized via macros, e.g. -DPE_EXIT_CODE=14"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced InStream function readWordTo/readTokenTo/readStringTo/readLineTo for faster reading"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced global functions: format(), englishEnding(), upperCase(), lowerCase(), compress()"</span><span class="token punctuation">,</span>        <span class="token string">"Manual buffer in InStreams, some IO speed improvements"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced quitif(bool, const char* pattern, ...) which delegates to quitf() in case of first argument is true"</span><span class="token punctuation">,</span>        <span class="token string">"Introduced guard against missed quitf() in checker or readEof() in validators"</span><span class="token punctuation">,</span>        <span class="token string">"Supported readStrictReal/readStrictDouble - to use in validators to check strictly float numbers"</span><span class="token punctuation">,</span>        <span class="token string">"Supported registerInteraction(argc, argv)"</span><span class="token punctuation">,</span>        <span class="token string">"Print checker message to the stderr instead of stdout"</span><span class="token punctuation">,</span>        <span class="token string">"Supported TResult _points to output calculated score, use quitp(...) functions"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed to be compilable on Mac"</span><span class="token punctuation">,</span>        <span class="token string">"PC_BASE_EXIT_CODE=50 in case of defined TESTSYS"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed issues 19-21, added __attribute__ format printf"</span><span class="token punctuation">,</span>        <span class="token string">"Some bug fixes"</span><span class="token punctuation">,</span>        <span class="token string">"ouf.readInt(1, 100) and similar calls return WA"</span><span class="token punctuation">,</span>        <span class="token string">"Modified random_t to avoid integer overflow"</span><span class="token punctuation">,</span>        <span class="token string">"Truncated checker output [patch by Stepan Gatilov]"</span><span class="token punctuation">,</span>        <span class="token string">"Renamed class random -> class random_t"</span><span class="token punctuation">,</span>        <span class="token string">"Supported name parameter for read-and-validation methods, like readInt(1, 2, \"n\")"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed bug in readDouble()"</span><span class="token punctuation">,</span>        <span class="token string">"Improved ensuref(), fixed nextLine to work in case of EOF, added startTest()"</span><span class="token punctuation">,</span>        <span class="token string">"Supported \"partially correct\", example: quitf(_pc(13), \"result=%d\", result)"</span><span class="token punctuation">,</span>        <span class="token string">"Added shuffle(begin, end), use it instead of random_shuffle(begin, end)"</span><span class="token punctuation">,</span>        <span class="token string">"Added readLine(const string&amp; ptrn), fixed the logic of readLine() in the validation mode"</span><span class="token punctuation">,</span>        <span class="token string">"Package extended with samples of generators and validators"</span><span class="token punctuation">,</span>        <span class="token string">"Written the documentation for classes and public methods in testlib.h"</span><span class="token punctuation">,</span>        <span class="token string">"Implemented random routine to support generators, use registerGen() to switch it on"</span><span class="token punctuation">,</span>        <span class="token string">"Implemented strict mode to validate tests, use registerValidation() to switch it on"</span><span class="token punctuation">,</span>        <span class="token string">"Now ncmp.cpp and wcmp.cpp are return WA if answer is suffix or prefix of the output"</span><span class="token punctuation">,</span>        <span class="token string">"Added InStream::readLong() and removed InStream::readLongint()"</span><span class="token punctuation">,</span>        <span class="token string">"Now no footer added to each report by default (use directive FOOTER to switch on)"</span><span class="token punctuation">,</span>        <span class="token string">"Now every checker has a name, use setName(const char* format, ...) to set it"</span><span class="token punctuation">,</span>        <span class="token string">"Now it is compatible with TTS (by Kittens Computing)"</span><span class="token punctuation">,</span>        <span class="token string">"Added \'ensure(condition, message = \"\")\' feature, it works like assert()"</span><span class="token punctuation">,</span>        <span class="token string">"Fixed compatibility with MS C++ 7.1"</span><span class="token punctuation">,</span>        <span class="token string">"Added footer with exit code information"</span><span class="token punctuation">,</span>        <span class="token string">"Added compatibility with EJUDGE (compile with EJUDGE directive)"</span><span class="token punctuation">,</span>        <span class="token string">"Added compatibility with Contester (compile with CONTESTER directive)"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _MSC_VER</span><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_NO_VA_START_VALIDATION</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/* Overrides random() for Borland C++. */</span><span class="token macro property">#<span class="token directive keyword">define</span> random __random_deprecated</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">undef</span> random</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">if</span> (_WIN32 || __WIN32__ || _WIN64 || __WIN64__ || __CYGWIN__)</span><span class="token macro property">#   <span class="token directive keyword">if</span> !defined(_MSC_VER) || _MSC_VER > 1400</span><span class="token macro property">#       <span class="token directive keyword">define</span> NOMINMAX 1</span><span class="token macro property">#       <span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> WORD unsigned short</span><span class="token macro property">#       <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#   <span class="token directive keyword">include</span> <span class="token string">&lt;io.h></span></span><span class="token macro property">#   <span class="token directive keyword">define</span> ON_WINDOWS</span><span class="token macro property">#   <span class="token directive keyword">if</span> defined(_MSC_VER) &amp;&amp; _MSC_VER > 1400</span><span class="token macro property">#       <span class="token directive keyword">pragma</span> warning( disable : 4127 )</span><span class="token macro property">#       <span class="token directive keyword">pragma</span> warning( disable : 4146 )</span><span class="token macro property">#       <span class="token directive keyword">pragma</span> warning( disable : 4458 )</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#   <span class="token directive keyword">define</span> WORD unsigned short</span><span class="token macro property">#   <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(FOR_WINDOWS) &amp;&amp; defined(FOR_LINUX)</span><span class="token macro property">#<span class="token directive keyword">error</span> Only one target system is allowed</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> LLONG_MIN</span><span class="token macro property">#<span class="token directive keyword">define</span> LLONG_MIN   (-9223372036854775807LL - 1)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ULLONG_MAX</span><span class="token macro property">#<span class="token directive keyword">define</span> ULLONG_MAX   (18446744073709551615)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">define</span> LF ((char)10)</span><span class="token macro property">#<span class="token directive keyword">define</span> CR ((char)13)</span><span class="token macro property">#<span class="token directive keyword">define</span> TAB ((char)9)</span><span class="token macro property">#<span class="token directive keyword">define</span> SPACE ((char)' ')</span><span class="token macro property">#<span class="token directive keyword">define</span> EOFC (255)</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> OK_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">ifdef</span> CONTESTER</span><span class="token macro property">#       <span class="token directive keyword">define</span> OK_EXIT_CODE 0xAC</span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> OK_EXIT_CODE 0</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WA_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">ifdef</span> EJUDGE</span><span class="token macro property">#       <span class="token directive keyword">define</span> WA_EXIT_CODE 5</span><span class="token macro property">#   <span class="token directive keyword">elif</span> defined(CONTESTER)</span><span class="token macro property">#       <span class="token directive keyword">define</span> WA_EXIT_CODE 0xAB</span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> WA_EXIT_CODE 1</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> PE_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">ifdef</span> EJUDGE</span><span class="token macro property">#       <span class="token directive keyword">define</span> PE_EXIT_CODE 4</span><span class="token macro property">#   <span class="token directive keyword">elif</span> defined(CONTESTER)</span><span class="token macro property">#       <span class="token directive keyword">define</span> PE_EXIT_CODE 0xAA</span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> PE_EXIT_CODE 2</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> FAIL_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">ifdef</span> EJUDGE</span><span class="token macro property">#       <span class="token directive keyword">define</span> FAIL_EXIT_CODE 6</span><span class="token macro property">#   <span class="token directive keyword">elif</span> defined(CONTESTER)</span><span class="token macro property">#       <span class="token directive keyword">define</span> FAIL_EXIT_CODE 0xA3</span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> FAIL_EXIT_CODE 3</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> DIRT_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">ifdef</span> EJUDGE</span><span class="token macro property">#       <span class="token directive keyword">define</span> DIRT_EXIT_CODE 6</span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> DIRT_EXIT_CODE 4</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> POINTS_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">define</span> POINTS_EXIT_CODE 7</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> UNEXPECTED_EOF_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">define</span> UNEXPECTED_EOF_EXIT_CODE 8</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> PC_BASE_EXIT_CODE</span><span class="token macro property">#   <span class="token directive keyword">ifdef</span> TESTSYS</span><span class="token macro property">#       <span class="token directive keyword">define</span> PC_BASE_EXIT_CODE 50</span><span class="token macro property">#   <span class="token directive keyword">else</span></span><span class="token macro property">#       <span class="token directive keyword">define</span> PC_BASE_EXIT_CODE 0</span><span class="token macro property">#   <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token macro property">#    <span class="token directive keyword">define</span> __TESTLIB_STATIC_ASSERT(condition) typedef void* __testlib_static_assert_type[(condition) ? 1 : -1] __attribute__((unused))</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#    <span class="token directive keyword">define</span> __TESTLIB_STATIC_ASSERT(condition) typedef void* __testlib_static_assert_type[(condition) ? 1 : -1]</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> ON_WINDOWS</span><span class="token macro property">#<span class="token directive keyword">define</span> I64 "%I64d"</span><span class="token macro property">#<span class="token directive keyword">define</span> U64 "%I64u"</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> I64 "%lld"</span><span class="token macro property">#<span class="token directive keyword">define</span> U64 "%llu"</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _MSC_VER</span><span class="token macro property">#   <span class="token directive keyword">define</span> NORETURN __declspec(noreturn)</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined __GNUC__</span><span class="token macro property">#   <span class="token directive keyword">define</span> NORETURN __attribute__ ((noreturn))</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#   <span class="token directive keyword">define</span> NORETURN</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">char</span> __testlib_format_buffer<span class="token punctuation">[</span><span class="token number">16777216</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> __testlib_format_buffer_usage_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> FMT_TO_RESULT(fmt, cstr, result)  std::string result;                              \            if (__testlib_format_buffer_usage_count != 0)                                  \                __testlib_fail("FMT_TO_RESULT::__testlib_format_buffer_usage_count != 0"); \            __testlib_format_buffer_usage_count++;                                         \            va_list ap;                                                                    \            va_start(ap, fmt);                                                             \            vsnprintf(__testlib_format_buffer, sizeof(__testlib_format_buffer), cstr, ap); \            va_end(ap);                                                                    \            __testlib_format_buffer[sizeof(__testlib_format_buffer) - 1] = 0;              \            result = std::string(__testlib_format_buffer);                                 \            __testlib_format_buffer_usage_count--;                                         \</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> __TESTLIB_LONGLONG_MAX <span class="token operator">=</span> <span class="token number">9223372036854775807LL</span><span class="token punctuation">;</span><span class="token keyword">bool</span> __testlib_hasTestCase<span class="token punctuation">;</span><span class="token keyword">int</span> __testlib_testCase <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setTestCase</span><span class="token punctuation">(</span><span class="token keyword">int</span> testCase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __testlib_hasTestCase <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    __testlib_testCase <span class="token operator">=</span> testCase<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unsetTestCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    __testlib_hasTestCase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    __testlib_testCase <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> <span class="token keyword">inline</span> T <span class="token function">__testlib_abs</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> <span class="token keyword">inline</span> T <span class="token function">__testlib_min</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> <span class="token keyword">inline</span> T <span class="token function">__testlib_max</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">__testlib_prelimIsNaN</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">double</span> ra <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __BORLANDC__</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ra <span class="token operator">!=</span> ra<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ra <span class="token operator">==</span> ra<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">></span> ra<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">&lt;</span> ra<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">_isnan</span><span class="token punctuation">(</span>ra<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>std<span class="token operator">::</span>string <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">__testlib_part</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__TESTLIB_STATIC_ASSERT</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token keyword">double</span> ra <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> llr1<span class="token punctuation">,</span> llr2<span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>llr1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ra<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ra <span class="token operator">=</span> <span class="token operator">-</span>ra<span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>llr2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ra<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> llnan <span class="token operator">=</span> <span class="token number">0xFFF8000000000000LL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__testlib_prelimIsNaN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">||</span> llnan <span class="token operator">==</span> llr1 <span class="token operator">||</span> llnan <span class="token operator">==</span> llr2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">__testlib_nan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__TESTLIB_STATIC_ASSERT</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> NAN</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> llnan <span class="token operator">=</span> <span class="token number">0xFFF8000000000000LL</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> nan<span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nan<span class="token punctuation">,</span> <span class="token operator">&amp;</span>llnan<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nan<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token keyword">return</span> NAN<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">__testlib_isInfinite</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">double</span> ra <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ra <span class="token operator">></span> <span class="token number">1E300</span> <span class="token operator">||</span> ra <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1E300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">doubleCompare</span><span class="token punctuation">(</span><span class="token keyword">double</span> expected<span class="token punctuation">,</span> <span class="token keyword">double</span> result<span class="token punctuation">,</span> <span class="token keyword">double</span> MAX_DOUBLE_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_isInfinite</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">__testlib_isInfinite</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">__testlib_isInfinite</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">__testlib_isInfinite</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_abs</span><span class="token punctuation">(</span>result <span class="token operator">-</span> expected<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> MAX_DOUBLE_ERROR <span class="token operator">+</span> <span class="token number">1E-15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> minv <span class="token operator">=</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span>expected <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> MAX_DOUBLE_ERROR<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    expected <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> MAX_DOUBLE_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> maxv <span class="token operator">=</span> <span class="token function">__testlib_max</span><span class="token punctuation">(</span>expected <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> MAX_DOUBLE_ERROR<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    expected <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> MAX_DOUBLE_ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token number">1E-15</span> <span class="token operator">>=</span> minv <span class="token operator">&amp;&amp;</span> result <span class="token operator">&lt;=</span> maxv <span class="token operator">+</span> <span class="token number">1E-15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">doubleDelta</span><span class="token punctuation">(</span><span class="token keyword">double</span> expected<span class="token punctuation">,</span> <span class="token keyword">double</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> absolute <span class="token operator">=</span> <span class="token function">__testlib_abs</span><span class="token punctuation">(</span>result <span class="token operator">-</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_abs</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1E-9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> relative <span class="token operator">=</span> <span class="token function">__testlib_abs</span><span class="token punctuation">(</span>absolute <span class="token operator">/</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span>absolute<span class="token punctuation">,</span> relative<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">return</span> absolute<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> !defined(_MSC_VER) || _MSC_VER &lt; 1900</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _fileno</span><span class="token macro property">#<span class="token directive keyword">define</span> _fileno(_stream)  ((_stream)->_file)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> O_BINARY</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span>    <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token macro property">#<span class="token directive keyword">endif</span></span>    std<span class="token operator">::</span>FILE<span class="token operator">*</span> file<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> O_BINARY</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __BORLANDC__</span>        <span class="token function">_setmode</span><span class="token punctuation">(</span><span class="token function">_fileno</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> O_BINARY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>        <span class="token function">setmode</span><span class="token punctuation">(</span><span class="token function">fileno</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> O_BINARY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> __cplusplus > 199711L || defined(_MSC_VER)</span><span class="token comment" spellcheck="true">/* opts */</span><span class="token keyword">void</span> <span class="token function">prepareOpts</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/* * Very simple regex-like pattern. * It used for two purposes: validation and generation. *  * For example, pattern("[a-z]{1,5}").next(rnd) will return * random string from lowercase latin letters with length  * from 1 to 5. It is easier to call rnd.next("[a-z]{1,5}")  * for the same effect.  *  * Another samples: * "mike|john" will generate (match) "mike" or "john"; * "-?[1-9][0-9]{0,3}" will generate (match) non-zero integers from -9999 to 9999; * "id-([ac]|b{2})" will generate (match) "id-a", "id-bb", "id-c"; * "[^0-9]*" will match sequences (empty or non-empty) without digits, you can't  * use it for generations. * * You can't use pattern for generation if it contains meta-symbol '*'. Also it * is not recommended to use it for char-sets with meta-symbol '^' like [^a-z]. * * For matching very simple greedy algorithm is used. For example, pattern * "[0-9]?1" will not match "1", because of greedy nature of matching. * Alternations (meta-symbols "|") are processed with brute-force algorithm, so  * do not use many alternations in one expression. * * If you want to use one expression many times it is better to compile it into * a single pattern like "pattern p("[a-z]+")". Later you can use  * "p.matches(std::string s)" or "p.next(random_t&amp; rd)" to check matching or generate * new string by pattern. *  * Simpler way to read token and check it for pattern matching is "inf.readToken("[a-z]+")". */</span><span class="token keyword">class</span> <span class="token class-name">random_t</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">pattern</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/* Create pattern instance by string. */</span>    <span class="token function">pattern</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Generate new string by pattern and given random_t. */</span>    std<span class="token operator">::</span>string <span class="token function">next</span><span class="token punctuation">(</span>random_t <span class="token operator">&amp;</span>rnd<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Checks if given string match the pattern. */</span>    <span class="token keyword">bool</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Returns source string of the pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string s<span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>pattern<span class="token operator">></span> children<span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> chars<span class="token punctuation">;</span>    <span class="token keyword">int</span> from<span class="token punctuation">;</span>    <span class="token keyword">int</span> to<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  * Use random_t instances to generate random values. It is preffered * way to use randoms instead of rand() function or self-written  * randoms. * * Testlib defines global variable "rnd" of random_t class. * Use registerGen(argc, argv, 1) to setup random_t seed be command * line (to use latest random generator version). * * Random generates uniformly distributed values if another strategy is * not specified explicitly. */</span><span class="token keyword">class</span> <span class="token class-name">random_t</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> seed<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> multiplier<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> addend<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> mask<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> lim<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bits <span class="token operator">&lt;=</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            seed <span class="token operator">=</span> <span class="token punctuation">(</span>seed <span class="token operator">*</span> multiplier <span class="token operator">+</span> addend<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>seed <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">-</span> bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bits <span class="token operator">></span> <span class="token number">63</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::nextBits(int bits): n must be less than 64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lowerBitCount <span class="token operator">=</span> <span class="token punctuation">(</span>random_t<span class="token operator">::</span>version <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">31</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> right <span class="token operator">=</span> <span class="token function">nextBits</span><span class="token punctuation">(</span>lowerBitCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> left <span class="token operator">^</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* New random_t with fixed seed. */</span>    <span class="token function">random_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">seed</span><span class="token punctuation">(</span><span class="token number">3905348978240129619LL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Sets seed by command line. */</span>    <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        random_t p<span class="token punctuation">;</span>        seed <span class="token operator">=</span> <span class="token number">3905348978240129619LL</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>size_t le <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> le<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                seed <span class="token operator">=</span> seed <span class="token operator">*</span> multiplier <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> addend<span class="token punctuation">;</span>            seed <span class="token operator">+</span><span class="token operator">=</span> multiplier <span class="token operator">/</span> addend<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        seed <span class="token operator">=</span> seed <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Sets seed by given value. */</span>    <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> _seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _seed <span class="token operator">=</span> <span class="token punctuation">(</span>_seed <span class="token operator">^</span> multiplier<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>        seed <span class="token operator">=</span> _seed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __BORLANDC__</span>    <span class="token comment" spellcheck="true">/* Random string value by given pattern (see pattern documentation). */</span>    std<span class="token operator">::</span>string <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pattern <span class="token function">p</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token comment" spellcheck="true">/* Random string value by given pattern (see pattern documentation). */</span>    std<span class="token operator">::</span>string <span class="token function">next</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string ptrn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pattern <span class="token function">p</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* Random value in range [0, n-1]. */</span>    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(int n): n must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token operator">-</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// n is a power of 2</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> limit <span class="token operator">=</span> INT_MAX <span class="token operator">/</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> bits<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            bits <span class="token operator">=</span> <span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>bits <span class="token operator">>=</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">(</span>bits <span class="token operator">%</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random value in range [0, n-1]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> INT_MAX<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(unsigned int n): n must be less INT_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random value in range [0, n-1]. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(long long n): n must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> limit <span class="token operator">=</span> __TESTLIB_LONGLONG_MAX <span class="token operator">/</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> bits<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            bits <span class="token operator">=</span> <span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>bits <span class="token operator">>=</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bits <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random value in range [0, n-1]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>__TESTLIB_LONGLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(unsigned long long n): n must be less LONGLONG_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random value in range [0, n-1]. */</span>    <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random value in range [0, n-1]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(unsigned long n): n must be less LONG_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random value in range [from,to]. */</span>    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random value in range [from,to]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random value in range [from,to]. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random value in range [from,to]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(unsigned long long from, unsigned long long to): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random value in range [from,to]. */</span>    <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">long</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random value in range [from,to]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(unsigned long from, unsigned long to): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random double value in range [0, 1). */</span>    <span class="token keyword">double</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> right <span class="token operator">=</span> <span class="token function">nextBits</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random double value in range [0, n). */</span>    <span class="token keyword">double</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random double value in range [from, to). */</span>    <span class="token keyword">double</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">double</span> from<span class="token punctuation">,</span> <span class="token keyword">double</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::next(double from, double to): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random element from container. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> Container<span class="token operator">></span>    <span class="token keyword">typename</span> Container<span class="token operator">::</span>value_type <span class="token function">any</span><span class="token punctuation">(</span><span class="token keyword">const</span> Container <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        size_t size <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::any(const Container&amp; c): c.size() must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">next</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random element from iterator range. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> Iter<span class="token operator">></span>    <span class="token keyword">typename</span> Iter<span class="token operator">::</span>value_type <span class="token function">any</span><span class="token punctuation">(</span><span class="token keyword">const</span> Iter <span class="token operator">&amp;</span>begin<span class="token punctuation">,</span> <span class="token keyword">const</span> Iter <span class="token operator">&amp;</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::any(const Iter&amp; begin, const Iter&amp; end): range must have positive length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>begin <span class="token operator">+</span> <span class="token function">next</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Random string value by given pattern (see pattern documentation). */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span>    <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    std<span class="token operator">::</span>string <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*      * Weighted next. If type == 0 than it is usual "next()".     *     * If type = 1, than it returns "max(next(), next())"     * (the number of "max" functions equals to "type").     *     * If type &lt; 0, than "max" function replaces with "min".     */</span>    <span class="token keyword">int</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(int n, int type): n must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&lt;</span> random_t<span class="token operator">::</span>lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">+</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">-</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                p <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">-</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">(</span>n <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(long long n, int type): n must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&lt;</span> random_t<span class="token operator">::</span>lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">+</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">-</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span><span class="token function">__testlib_max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">double</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&lt;</span> random_t<span class="token operator">::</span>lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">+</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">-</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">double</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(double n, int type): n must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&lt;</span> random_t<span class="token operator">::</span>lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">+</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">-</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> <span class="token function">__testlib_min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> n <span class="token operator">*</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                p <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span>type <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> n <span class="token operator">*</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> INT_MAX<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(unsigned int n, int type): n must be less INT_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>__TESTLIB_LONGLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(unsigned long long n, int type): n must be less LONGLONG_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* See wnext(int, int). It uses the same algorithms. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(unsigned long n, int type): n must be less LONG_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random value in range [from, to]. */</span>    <span class="token keyword">int</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(int from, int to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random value in range [from, to]. */</span>    <span class="token keyword">int</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(unsigned int from, unsigned int to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random value in range [from, to]. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(long long from, long long to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random value in range [from, to]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span>                    <span class="token string">"random_t::wnext(unsigned long long from, unsigned long long to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random value in range [from, to]. */</span>    <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">long</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(long from, long to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random value in range [from, to]. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(unsigned long from, unsigned long to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random double value in range [from, to). */</span>    <span class="token keyword">double</span> <span class="token function">wnext</span><span class="token punctuation">(</span><span class="token keyword">double</span> from<span class="token punctuation">,</span> <span class="token keyword">double</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wnext(double from, double to, int type): from can't not exceed to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">wnext</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random element from container. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> Container<span class="token operator">></span>    <span class="token keyword">typename</span> Container<span class="token operator">::</span>value_type <span class="token function">wany</span><span class="token punctuation">(</span><span class="token keyword">const</span> Container <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        size_t size <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::wany(const Container&amp; c, int type): c.size() must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">wnext</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns weighted random element from iterator range. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> Iter<span class="token operator">></span>    <span class="token keyword">typename</span> Iter<span class="token operator">::</span>value_type <span class="token function">wany</span><span class="token punctuation">(</span><span class="token keyword">const</span> Iter <span class="token operator">&amp;</span>begin<span class="token punctuation">,</span> <span class="token keyword">const</span> Iter <span class="token operator">&amp;</span>end<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span>                    <span class="token string">"random_t::any(const Iter&amp; begin, const Iter&amp; end, int type): range must have positive length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>begin <span class="token operator">+</span> <span class="token function">wnext</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random permutation of the given size (values are between `first` and `first`+size-1)*/</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> E<span class="token operator">></span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">perm</span><span class="token punctuation">(</span>T size<span class="token punctuation">,</span> E first<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::perm(T size, E first = 0): size must be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        E current <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>T i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token function">next</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random permutation of the given size (values are between 0 and size-1)*/</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">perm</span><span class="token punctuation">(</span>T size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">perm</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns `size` unordered (unsorted) distinct numbers between `from` and `to`. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> T from<span class="token punctuation">,</span> T to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct expected from &lt;= to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct expected size >= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> n<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct expected size &lt;= to - from + 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token keyword">double</span> expected <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            expected <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">double</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expected <span class="token operator">&lt;</span> <span class="token keyword">double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>set<span class="token operator">&lt;</span>T<span class="token operator">></span> vals<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>vals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>                vals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1000000000</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct here expected to - from + 1 &lt;= 1000000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token function">perm</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns `size` unordered (unsorted) distinct numbers between `0` and `upper`-1. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> T upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct expected size >= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>upper <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct expected upper > 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> upper<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::distinct expected size &lt;= upper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">distinct</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> upper <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random (unsorted) partition which is a representation of sum as a sum of integers not less than min_part. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> T sum<span class="token punctuation">,</span> T min_part<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min_part <span class="token operator">*</span> size <span class="token operator">></span> sum<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::partition: min_part * size > sum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T sum_ <span class="token operator">=</span> sum<span class="token punctuation">;</span>        sum <span class="token operator">-</span><span class="token operator">=</span> min_part <span class="token operator">*</span> size<span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">septums</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> d <span class="token operator">=</span> <span class="token function">distinct</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">T</span><span class="token punctuation">(</span>sum <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            septums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>septums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> septums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">result</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> septums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> septums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> septums<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> min_part<span class="token punctuation">;</span>        T result_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            result_sum <span class="token operator">+</span><span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result_sum <span class="token operator">!=</span> sum_<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::partition: partition sum is expeced to be the given sum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>std<span class="token operator">::</span><span class="token function">min_element</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> min_part<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::partition: partition min is expeced to be to less than the given min_part"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> size <span class="token operator">||</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> size<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"random_t::partition: partition size is expected to be equal to the given size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Returns random (unsorted) partition which is a representation of sum as a sum of non-negative integers. */</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> T sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> random_t<span class="token operator">::</span>lim <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> random_t<span class="token operator">::</span>multiplier <span class="token operator">=</span> <span class="token number">0x5DEECE66DLL</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> random_t<span class="token operator">::</span>addend <span class="token operator">=</span> <span class="token number">0xBLL</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> random_t<span class="token operator">::</span>mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> random_t<span class="token operator">::</span>version <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Pattern implementation */</span><span class="token keyword">bool</span> pattern<span class="token operator">::</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">matches</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">__pattern_isSlash</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\\'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> <span class="token keyword">char</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slashes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> before <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>before <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>before<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\\'</span><span class="token punctuation">)</span>        before<span class="token operator">--</span><span class="token punctuation">,</span> slashes<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slashes <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">__pattern_getChar</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isSlash</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span>        pos <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__pattern_greedyMatch</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>std<span class="token operator">::</span><span class="token function">binary_search</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chars<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            result<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string pattern<span class="token operator">::</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> pattern<span class="token operator">::</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">__pattern_greedyMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> from<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> to<span class="token punctuation">)</span>            size <span class="token operator">=</span> to<span class="token punctuation">;</span>        pos <span class="token operator">+</span><span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> child <span class="token operator">&lt;</span> children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> child<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">return</span> pos <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string pattern<span class="token operator">::</span><span class="token function">next</span><span class="token punctuation">(</span>random_t <span class="token operator">&amp;</span>rnd<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string result<span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern::next(random_t&amp; rnd): can't process character '*' for generation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>to <span class="token operator">-</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> from<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            result <span class="token operator">+</span><span class="token operator">=</span> chars<span class="token punctuation">[</span>rnd<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> child <span class="token operator">=</span> rnd<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+</span><span class="token operator">=</span> children<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>rnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__pattern_scanCounts</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t <span class="token operator">&amp;</span>pos<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        from <span class="token operator">=</span> to <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> parts<span class="token punctuation">;</span>        std<span class="token operator">::</span>string part<span class="token punctuation">;</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                parts<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">,</span> part <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                part <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">__pattern_getChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>part <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>            parts<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> numbers<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> number<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">sscanf</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            numbers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            from <span class="token operator">=</span> to <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            from <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> to<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            from <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> to <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            from <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> to <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            from <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> to <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        from <span class="token operator">=</span> to <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">__pattern_scanCharSet</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> size_t <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> negative <span class="token operator">=</span> <span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pos<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    prev <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">char</span> next <span class="token operator">=</span> <span class="token function">__pattern_getChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">></span> next<span class="token punctuation">)</span>                    <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> prev<span class="token punctuation">;</span> c <span class="token operator">!=</span> next<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>                    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> <span class="token function">__pattern_getChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>negative<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> actuals<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> code <span class="token operator">&lt;</span> <span class="token number">255</span><span class="token punctuation">;</span> code<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>std<span class="token operator">::</span><span class="token function">binary_search</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>                    actuals<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> actuals<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">__pattern_getChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>pattern<span class="token operator">::</span><span class="token function">pattern</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">s</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">int</span> opened <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> firstClose <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> seps<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            opened<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            opened<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opened <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> firstClose <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                firstClose <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opened <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> opened <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            seps<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opened <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"pattern: Illegal pattern (or part) \""</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>seps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> firstClose <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">__pattern_isCommandChar</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">pattern</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>seps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            seps<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                children<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">pattern</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> seps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> last<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> seps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            chars <span class="token operator">=</span> <span class="token function">__pattern_scanCharSet</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">__pattern_scanCounts</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                children<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">pattern</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* End of pattern implementation */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> C<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">isEof</span><span class="token punctuation">(</span>C c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> c <span class="token operator">==</span> EOFC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> C<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">isEoln</span><span class="token punctuation">(</span>C c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LF <span class="token operator">||</span> c <span class="token operator">==</span> CR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> C<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">isBlanks</span><span class="token punctuation">(</span>C c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LF <span class="token operator">||</span> c <span class="token operator">==</span> CR <span class="token operator">||</span> c <span class="token operator">==</span> SPACE <span class="token operator">||</span> c <span class="token operator">==</span> TAB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> std<span class="token operator">::</span>string <span class="token function">trim</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBlanks</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBlanks</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> TMode <span class="token punctuation">{</span>    _input<span class="token punctuation">,</span> _output<span class="token punctuation">,</span> _answer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Outcomes 6-15 are reserved for future use. */</span><span class="token keyword">enum</span> TResult <span class="token punctuation">{</span>    _ok <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    _wa <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    _pe <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    _fail <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    _dirt <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    _points <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>    _unexpected_eof <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>    _partially <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> TTestlibMode <span class="token punctuation">{</span>    _unknown<span class="token punctuation">,</span> _checker<span class="token punctuation">,</span> _validator<span class="token punctuation">,</span> _generator<span class="token punctuation">,</span> _interactor<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> _pc(exitCode) (TResult(_partially + (exitCode)))</span><span class="token comment" spellcheck="true">/* Outcomes 6-15 are reserved for future use. */</span><span class="token keyword">const</span> std<span class="token operator">::</span>string outcomes<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"accepted"</span><span class="token punctuation">,</span>        <span class="token string">"wrong-answer"</span><span class="token punctuation">,</span>        <span class="token string">"presentation-error"</span><span class="token punctuation">,</span>        <span class="token string">"fail"</span><span class="token punctuation">,</span>        <span class="token string">"fail"</span><span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> PCMS2</span>        <span class="token string">"points"</span><span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">else</span></span>        <span class="token string">"relative-scoring"</span><span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"unexpected-eof"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"reserved"</span><span class="token punctuation">,</span>        <span class="token string">"partially-correct"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InputStreamReader</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">unreadChar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>InputStreamReader<span class="token operator">::</span><span class="token operator">~</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// No operations.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">StringInputStreamReader</span> <span class="token operator">:</span> <span class="token keyword">public</span> InputStreamReader <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token operator">::</span>string s<span class="token punctuation">;</span>    size_t pos<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">StringInputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>content<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">s</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No operations.</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unreadChar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"FileFileInputStreamReader::unreadChar(int): pos == 0."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pos <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No operations.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FileInputStreamReader</span> <span class="token operator">:</span> <span class="token keyword">public</span> InputStreamReader <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>    std<span class="token operator">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> line<span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> undoChars<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">postprocessGetc</span><span class="token punctuation">(</span><span class="token keyword">int</span> getcResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getcResult <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> getcResult<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>undoChars<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            c <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">getc</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> undoChars<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            undoChars<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LF<span class="token punctuation">)</span>            line<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">ungetc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token comment" spellcheck="true">/*, FILE* file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LF<span class="token punctuation">)</span>            line<span class="token operator">--</span><span class="token punctuation">;</span>        undoChars<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">FileInputStreamReader</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">file</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No operations.</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ungetc</span><span class="token punctuation">(</span>c<span class="token comment" spellcheck="true">/*, file*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">postprocessGetc</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">postprocessGetc</span><span class="token punctuation">(</span><span class="token function">getc</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getc</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unreadChar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ungetc</span><span class="token punctuation">(</span>c<span class="token comment" spellcheck="true">/*, file*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> line<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> file <span class="token operator">||</span> <span class="token function">feof</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> EOFC <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span> <span class="token operator">&amp;&amp;</span> <span class="token function">feof</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">unreadChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BufferedFileInputStreamReader</span> <span class="token operator">:</span> <span class="token keyword">public</span> InputStreamReader <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> size_t BUFFER_SIZE<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> size_t MAX_UNREAD_COUNT<span class="token punctuation">;</span>    std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token operator">*</span>isEof<span class="token punctuation">;</span>    <span class="token keyword">int</span> bufferPos<span class="token punctuation">;</span>    size_t bufferSize<span class="token punctuation">;</span>    std<span class="token operator">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> line<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> file<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"BufferedFileInputStreamReader: file == NULL ("</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferPos <span class="token operator">>=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            size_t readSize <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>                    buffer <span class="token operator">+</span> MAX_UNREAD_COUNT<span class="token punctuation">,</span>                    <span class="token number">1</span><span class="token punctuation">,</span>                    BUFFER_SIZE <span class="token operator">-</span> MAX_UNREAD_COUNT<span class="token punctuation">,</span>                    file            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readSize <span class="token operator">&lt;</span> BUFFER_SIZE <span class="token operator">-</span> MAX_UNREAD_COUNT                <span class="token operator">&amp;&amp;</span> <span class="token function">ferror</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"BufferedFileInputStreamReader: unable to read ("</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferSize <span class="token operator">=</span> MAX_UNREAD_COUNT <span class="token operator">+</span> readSize<span class="token punctuation">;</span>            bufferPos <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>MAX_UNREAD_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span><span class="token function">memset</span><span class="token punctuation">(</span>isEof <span class="token operator">+</span> MAX_UNREAD_COUNT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>isEof<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> readSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> readSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> buffer<span class="token punctuation">[</span>bufferPos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> LF<span class="token punctuation">)</span>            line<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BufferedFileInputStreamReader</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">file</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        isEof <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        bufferSize <span class="token operator">=</span> MAX_UNREAD_COUNT<span class="token punctuation">;</span>        bufferPos <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>MAX_UNREAD_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">BufferedFileInputStreamReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">;</span>            buffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> isEof<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isEof<span class="token punctuation">;</span>            isEof <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>        <span class="token keyword">return</span> isEof<span class="token punctuation">[</span>bufferPos<span class="token punctuation">]</span> <span class="token operator">?</span> EOFC <span class="token operator">:</span> buffer<span class="token punctuation">[</span>bufferPos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> EOFC<span class="token punctuation">;</span>        <span class="token keyword">return</span> isEof<span class="token punctuation">[</span>bufferPos<span class="token punctuation">]</span> <span class="token operator">?</span> EOFC <span class="token operator">:</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unreadChar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bufferPos<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferPos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"BufferedFileInputStreamReader::unreadChar(int): bufferPos &lt; 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isEof<span class="token punctuation">[</span>bufferPos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> EOFC<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">[</span>bufferPos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LF<span class="token punctuation">)</span>            line<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> line<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> EOFC <span class="token operator">==</span> <span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> size_t BufferedFileInputStreamReader<span class="token operator">::</span>BUFFER_SIZE <span class="token operator">=</span> <span class="token number">2000000</span><span class="token punctuation">;</span><span class="token keyword">const</span> size_t BufferedFileInputStreamReader<span class="token operator">::</span>MAX_UNREAD_COUNT <span class="token operator">=</span> BufferedFileInputStreamReader<span class="token operator">::</span>BUFFER_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * Streams to be used for reading data in checkers or validators. * Each read*() method moves pointer to the next character after the * read value. */</span><span class="token keyword">struct</span> InStream <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Do not use them. */</span>    <span class="token function">InStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">InStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Wrap std::string with InStream. */</span>    <span class="token function">InStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> InStream <span class="token operator">&amp;</span>baseStream<span class="token punctuation">,</span> std<span class="token operator">::</span>string content<span class="token punctuation">)</span><span class="token punctuation">;</span>    InputStreamReader <span class="token operator">*</span>reader<span class="token punctuation">;</span>    <span class="token keyword">int</span> lastLine<span class="token punctuation">;</span>    std<span class="token operator">::</span>string name<span class="token punctuation">;</span>    TMode mode<span class="token punctuation">;</span>    <span class="token keyword">bool</span> opened<span class="token punctuation">;</span>    <span class="token keyword">bool</span> stdfile<span class="token punctuation">;</span>    <span class="token keyword">bool</span> strict<span class="token punctuation">;</span>    <span class="token keyword">int</span> wordReserveSize<span class="token punctuation">;</span>    std<span class="token operator">::</span>string _tmpReadToken<span class="token punctuation">;</span>    <span class="token keyword">int</span> readManyIteration<span class="token punctuation">;</span>    size_t maxFileSize<span class="token punctuation">;</span>    size_t maxTokenLength<span class="token punctuation">;</span>    size_t maxMessageLength<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string fileName<span class="token punctuation">,</span> TMode mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>f<span class="token punctuation">,</span> TMode mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Moves stream pointer to the first non-white-space character or EOF. */</span>    <span class="token keyword">void</span> <span class="token function">skipBlanks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Returns current character in the stream. Doesn't remove it from stream. */</span>    <span class="token keyword">char</span> <span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Moves stream pointer one character forward. */</span>    <span class="token keyword">void</span> <span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Returns current character and moves pointer one character forward. */</span>    <span class="token keyword">char</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Returns current character and moves pointer one character forward. */</span>    <span class="token keyword">char</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readChar()" but ensures that the result is equal to given parameter. */</span>    <span class="token keyword">char</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readChar()" but ensures that the result is equal to the space (code=32). */</span>    <span class="token keyword">char</span> <span class="token function">readSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Puts back the character into the stream. */</span>    <span class="token keyword">void</span> <span class="token function">unreadChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reopens stream, you should not use it. */</span>    <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Checks that current position is EOF. If not it doesn't move stream pointer. */</span>    <span class="token keyword">bool</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Moves pointer to the first non-white-space character and calls "eof()". */</span>    <span class="token keyword">bool</span> <span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Checks that current position contains EOLN.      * If not it doesn't move stream pointer.      * In strict mode expects "#13#10" for windows or "#10" for other platforms.     */</span>    <span class="token keyword">bool</span> <span class="token function">eoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Moves pointer to the first non-space and non-tab character and calls "eoln()". */</span>    <span class="token keyword">bool</span> <span class="token function">seekEoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Moves stream pointer to the first character of the next line (if exists). */</span>    <span class="token keyword">void</span> <span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Reads new token. Ignores white-spaces into the non-strict mode      * (strict mode is used in validators usually).      */</span>    std<span class="token operator">::</span>string <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readWord()", it is preffered to use "readToken()". */</span>    std<span class="token operator">::</span>string <span class="token function">readToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readWord()", but ensures that token matches to given pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">readWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readToken()", but ensures that token matches to given pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">readToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string <span class="token function">readToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readTokens</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readTokens</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">readTokens</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readWordTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readWordTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readWordTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readTokenTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readTokenTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readTokenTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Reads new long long value. Ignores white-spaces into the non-strict mode      * (strict mode is used in validators usually).      */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">readUnsignedLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Reads new int. Ignores white-spaces into the non-strict mode      * (strict mode is used in validators usually).      */</span>    <span class="token keyword">int</span> <span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Reads new int. Ignores white-spaces into the non-strict mode      * (strict mode is used in validators usually).      */</span>    <span class="token keyword">int</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readLong()" but ensures that value in the range [minv,maxv]. */</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">readLong</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads space-separated sequence of long longs. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>    <span class="token function">readLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads space-separated sequence of long longs. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">readLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>    <span class="token function">readUnsignedLong</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>    <span class="token function">readUnsignedLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>                      <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">readUnsignedLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">readLong</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>    <span class="token function">readLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readInteger()" but ensures that value in the range [minv,maxv]. */</span>    <span class="token keyword">int</span> <span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readInt()" but ensures that value in the range [minv,maxv]. */</span>    <span class="token keyword">int</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads space-separated sequence of integers. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    <span class="token function">readIntegers</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads space-separated sequence of integers. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">readIntegers</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads space-separated sequence of integers. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">readInts</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads space-separated sequence of integers. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">readInts</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Reads new double. Ignores white-spaces into the non-strict mode      * (strict mode is used in validators usually).      */</span>    <span class="token keyword">double</span> <span class="token function">readReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Reads new double. Ignores white-spaces into the non-strict mode      * (strict mode is used in validators usually).      */</span>    <span class="token keyword">double</span> <span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readReal()" but ensures that value in the range [minv,maxv]. */</span>    <span class="token keyword">double</span> <span class="token function">readReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span>    <span class="token function">readReals</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">readReals</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As "readDouble()" but ensures that value in the range [minv,maxv]. */</span>    <span class="token keyword">double</span> <span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span>    <span class="token function">readDoubles</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">readDoubles</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * As "readReal()" but ensures that value in the range [minv,maxv] and     * number of digit after the decimal point is in range [minAfterPointDigitCount,maxAfterPointDigitCount]     * and number is in the form "[-]digit(s)[.digit(s)]".     */</span>    <span class="token keyword">double</span> <span class="token function">readStrictReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                          <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                          <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">readStrictReals</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                                        <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                                        <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * As "readDouble()" but ensures that value in the range [minv,maxv] and     * number of digit after the decimal point is in range [minAfterPointDigitCount,maxAfterPointDigitCount]     * and number is in the form "[-]digit(s)[.digit(s)]".     */</span>    <span class="token keyword">double</span> <span class="token function">readStrictDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                            <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                            <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">readStrictDoubles</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                                          <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                                          <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* As readLine(). */</span>    std<span class="token operator">::</span>string <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Read many lines. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* See readLine(). */</span>    <span class="token keyword">void</span> <span class="token function">readStringTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()/readString()", but ensures that line matches to the given pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()/readString()", but ensures that line matches to the given pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Read many lines. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Read many lines. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()/readString()", but ensures that line matches to the given pattern. */</span>    <span class="token keyword">void</span> <span class="token function">readStringTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()/readString()", but ensures that line matches to the given pattern. */</span>    <span class="token keyword">void</span> <span class="token function">readStringTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Reads line from the current position to EOLN or EOF. Moves stream pointer to      * the first character of the new line (if possible).      */</span>    std<span class="token operator">::</span>string <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Read many lines. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* See readLine(). */</span>    <span class="token keyword">void</span> <span class="token function">readLineTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()", but ensures that line matches to the given pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()", but ensures that line matches to the given pattern. */</span>    std<span class="token operator">::</span>string <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Read many lines. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Read many lines. */</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>    <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()", but ensures that line matches to the given pattern. */</span>    <span class="token keyword">void</span> <span class="token function">readLineTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The same as "readLine()", but ensures that line matches to the given pattern. */</span>    <span class="token keyword">void</span> <span class="token function">readLineTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads EOLN or fails. Use it in validators. Calls "eoln()" method internally. */</span>    <span class="token keyword">void</span> <span class="token function">readEoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Reads EOF or fails. Use it in validators. Calls "eof()" method internally. */</span>    <span class="token keyword">void</span> <span class="token function">readEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Quit-functions aborts program with &lt;result> and &lt;message>:     * input/answer streams replace any result to FAIL.     */</span>    NORETURN <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Quit-functions aborts program with &lt;result> and &lt;message>:     * input/answer streams replace any result to FAIL.     */</span>    NORETURN <span class="token keyword">void</span> <span class="token function">quitf</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Quit-functions aborts program with &lt;result> and &lt;message>:     * input/answer streams replace any result to FAIL.     */</span>    <span class="token keyword">void</span> <span class="token function">quitif</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Quit-functions aborts program with &lt;result> and &lt;message>:     * input/answer streams replace any result to FAIL.     */</span>    NORETURN <span class="token keyword">void</span> <span class="token function">quits</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> std<span class="token operator">::</span>string msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Checks condition and aborts a program if codition is false.     * Returns _wa for ouf and _fail on any other streams.     */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span>    <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">void</span> <span class="token function">ensuref</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">__testlib_ensure</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> std<span class="token operator">::</span>string message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NO_INDEX <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">char</span> OPEN_BRACKET <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">char</span> CLOSE_BRACKET <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> WORD LightGray <span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> WORD LightRed <span class="token operator">=</span> <span class="token number">0x0c</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> WORD LightCyan <span class="token operator">=</span> <span class="token number">0x0b</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> WORD LightGreen <span class="token operator">=</span> <span class="token number">0x0a</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">static</span> WORD LightYellow <span class="token operator">=</span> <span class="token number">0x0e</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">textColor</span><span class="token punctuation">(</span>WORD color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quitscr</span><span class="token punctuation">(</span>WORD color<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quitscrS</span><span class="token punctuation">(</span>WORD color<span class="token punctuation">,</span> std<span class="token operator">::</span>string msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">xmlSafeWrite</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">InStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> InStream <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InStream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> InStream <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>InStream inf<span class="token punctuation">;</span>InStream ouf<span class="token punctuation">;</span>InStream ans<span class="token punctuation">;</span><span class="token keyword">bool</span> appesMode<span class="token punctuation">;</span>std<span class="token operator">::</span>string resultName<span class="token punctuation">;</span>std<span class="token operator">::</span>string checkerName <span class="token operator">=</span> <span class="token string">"untitled checker"</span><span class="token punctuation">;</span>random_t rnd<span class="token punctuation">;</span>TTestlibMode testlibMode <span class="token operator">=</span> _unknown<span class="token punctuation">;</span><span class="token keyword">double</span> __testlib_points <span class="token operator">=</span> std<span class="token operator">::</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">infinity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ValidatorBoundsHit <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">double</span> EPS<span class="token punctuation">;</span>    <span class="token keyword">bool</span> minHit<span class="token punctuation">;</span>    <span class="token keyword">bool</span> maxHit<span class="token punctuation">;</span>    <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span><span class="token keyword">bool</span> minHit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> maxHit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">minHit</span><span class="token punctuation">(</span>minHit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxHit</span><span class="token punctuation">(</span>maxHit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    ValidatorBoundsHit <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">const</span> ValidatorBoundsHit <span class="token operator">&amp;</span>validatorBoundsHit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span>                <span class="token function">__testlib_max</span><span class="token punctuation">(</span>minHit<span class="token punctuation">,</span> validatorBoundsHit<span class="token punctuation">.</span>minHit<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">__testlib_max</span><span class="token punctuation">(</span>maxHit<span class="token punctuation">,</span> validatorBoundsHit<span class="token punctuation">.</span>maxHit<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> ValidatorBoundsHit<span class="token operator">::</span>EPS <span class="token operator">=</span> <span class="token number">1E-12</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Validator</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> _initialized<span class="token punctuation">;</span>    std<span class="token operator">::</span>string _testset<span class="token punctuation">;</span>    std<span class="token operator">::</span>string _group<span class="token punctuation">;</span>    std<span class="token operator">::</span>string _testOverviewLogFileName<span class="token punctuation">;</span>    std<span class="token operator">::</span>map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> ValidatorBoundsHit<span class="token operator">></span> _boundsHitByVariableName<span class="token punctuation">;</span>    std<span class="token operator">::</span>set<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> _features<span class="token punctuation">;</span>    std<span class="token operator">::</span>set<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> _hitFeatures<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">isVariableNameBoundsAnalyzable</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> variableName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>variableName<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> variableName<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">||</span> variableName<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">isFeatureNameAnalyzable</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>featureName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> featureName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>featureName<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_initialized</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_testset</span><span class="token punctuation">(</span><span class="token string">"tests"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">testset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_initialized<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Validator should be initialized with registerValidation(argc, argv) instead of registerValidation() to support validator.testset()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _testset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_initialized<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Validator should be initialized with registerValidation(argc, argv) instead of registerValidation() to support validator.group()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _group<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">testOverviewLogFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> _testOverviewLogFileName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setTestset</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> testset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _testset <span class="token operator">=</span> testset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setGroup</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _group <span class="token operator">=</span> group<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setTestOverviewLogFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> testOverviewLogFileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _testOverviewLogFileName <span class="token operator">=</span> testOverviewLogFileName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addBoundsHit</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">,</span> ValidatorBoundsHit boundsHit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVariableNameBoundsAnalyzable</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            _boundsHitByVariableName<span class="token punctuation">[</span>variableName<span class="token punctuation">]</span>                    <span class="token operator">=</span> boundsHit<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>_boundsHitByVariableName<span class="token punctuation">[</span>variableName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">getBoundsHitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>string result<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> ValidatorBoundsHit<span class="token operator">></span><span class="token operator">::</span>iterator i <span class="token operator">=</span> _boundsHitByVariableName<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             i <span class="token operator">!=</span> _boundsHitByVariableName<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\""</span> <span class="token operator">+</span> i<span class="token operator">-</span><span class="token operator">></span>first <span class="token operator">+</span> <span class="token string">"\":"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>minHit<span class="token punctuation">)</span>                result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" min-value-hit"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span>maxHit<span class="token punctuation">)</span>                result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" max-value-hit"</span><span class="token punctuation">;</span>            result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">getFeaturesLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>string result<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>set<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token operator">::</span>iterator i <span class="token operator">=</span> _features<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             i <span class="token operator">!=</span> _features<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"feature \""</span> <span class="token operator">+</span> <span class="token operator">*</span>i <span class="token operator">+</span> <span class="token string">"\":"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_hitFeatures<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" hit"</span><span class="token punctuation">;</span>            result <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">writeTestOverviewLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_testOverviewLogFileName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>string <span class="token function">fileName</span><span class="token punctuation">(</span>_testOverviewLogFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            _testOverviewLogFileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            FILE <span class="token operator">*</span>testOverviewLogFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> testOverviewLogFile<span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Validator::writeTestOverviewLog: can't test overview log to ("</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span>testOverviewLogFile<span class="token punctuation">,</span> <span class="token string">"%s%s"</span><span class="token punctuation">,</span> <span class="token function">getBoundsHitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getFeaturesLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fclose</span><span class="token punctuation">(</span>testOverviewLogFile<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span>                        <span class="token string">"Validator::writeTestOverviewLog: can't close test overview log file ("</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addFeature</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>feature<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_features<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Feature "</span> <span class="token operator">+</span> feature <span class="token operator">+</span> <span class="token string">" registered twice."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFeatureNameAnalyzable</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Feature name '"</span> <span class="token operator">+</span> feature <span class="token operator">+</span> <span class="token string">"' contains restricted characters."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _features<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">feature</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>feature<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFeatureNameAnalyzable</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Feature name '"</span> <span class="token operator">+</span> feature <span class="token operator">+</span> <span class="token string">"' contains restricted characters."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_features<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Feature "</span> <span class="token operator">+</span> feature <span class="token operator">+</span> <span class="token string">" didn't registered via addFeature(feature)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _hitFeatures<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> validator<span class="token punctuation">;</span><span class="token keyword">struct</span> TestlibFinalizeGuard <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> alive<span class="token punctuation">;</span>    <span class="token keyword">int</span> quitCount<span class="token punctuation">,</span> readEofCount<span class="token punctuation">;</span>    <span class="token function">TestlibFinalizeGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">quitCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">readEofCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No operations.</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">TestlibFinalizeGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> _alive <span class="token operator">=</span> alive<span class="token punctuation">;</span>        alive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_alive<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>testlibMode <span class="token operator">==</span> _checker <span class="token operator">&amp;&amp;</span> quitCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Checker must end with quit or quitf call."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>testlibMode <span class="token operator">==</span> _validator <span class="token operator">&amp;&amp;</span> readEofCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> quitCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Validator must end with readEof call."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        validator<span class="token punctuation">.</span><span class="token function">writeTestOverviewLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> TestlibFinalizeGuard<span class="token operator">::</span>alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>TestlibFinalizeGuard testlibFinalizeGuard<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * Call it to disable checks on finalization. */</span><span class="token keyword">void</span> <span class="token function">disableFinalizeGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    TestlibFinalizeGuard<span class="token operator">::</span>alive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* Interactor streams. */</span>std<span class="token operator">::</span>fstream tout<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* implementation */</span><span class="token macro property">#<span class="token directive keyword">if</span> __cplusplus > 199711L || defined(_MSC_VER)</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">vtos</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> std<span class="token operator">::</span>true_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        T <span class="token function">n</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> negative <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>string s<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            T digit <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                digit <span class="token operator">=</span> <span class="token operator">-</span>digit<span class="token punctuation">;</span>            s <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> negative <span class="token operator">?</span> <span class="token string">"-"</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">vtos</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> std<span class="token operator">::</span>false_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">static</span> std<span class="token operator">::</span>stringstream ss<span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span>    ss <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">vtos</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> std<span class="token operator">::</span>is_integral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* signed case. */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> std<span class="token operator">::</span>false_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> trailingZeroCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    T n_ <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n_ <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n_ <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> trailingZeroCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailingZeroCount <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n_ <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"10^"</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>trailingZeroCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"-10^"</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>trailingZeroCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*10^"</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>trailingZeroCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* unsigned case. */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> std<span class="token operator">::</span>true_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> trailingZeroCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    T n_ <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n_ <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n_ <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> trailingZeroCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailingZeroCount <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n_ <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"10^"</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>trailingZeroCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*10^"</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>trailingZeroCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> std<span class="token operator">::</span>is_unsigned<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">vtos</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">static</span> std<span class="token operator">::</span>stringstream ss<span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ss <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span>    ss <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">vtos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>InStream<span class="token operator">::</span><span class="token function">InStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    reader <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    lastLine <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    mode <span class="token operator">=</span> _input<span class="token punctuation">;</span>    strict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    stdfile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    wordReserveSize <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    readManyIteration <span class="token operator">=</span> NO_INDEX<span class="token punctuation">;</span>    maxFileSize <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 128MB.</span>    maxTokenLength <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 32MB.</span>    maxMessageLength <span class="token operator">=</span> <span class="token number">32000</span><span class="token punctuation">;</span><span class="token punctuation">}</span>InStream<span class="token operator">::</span><span class="token function">InStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> InStream <span class="token operator">&amp;</span>baseStream<span class="token punctuation">,</span> std<span class="token operator">::</span>string content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">StringInputStreamReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    lastLine <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    opened <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    strict <span class="token operator">=</span> baseStream<span class="token punctuation">.</span>strict<span class="token punctuation">;</span>    mode <span class="token operator">=</span> baseStream<span class="token punctuation">.</span>mode<span class="token punctuation">;</span>    name <span class="token operator">=</span> <span class="token string">"based on "</span> <span class="token operator">+</span> baseStream<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    readManyIteration <span class="token operator">=</span> NO_INDEX<span class="token punctuation">;</span>    maxFileSize <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 128MB.</span>    maxTokenLength <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 32MB.</span>    maxMessageLength <span class="token operator">=</span> <span class="token number">32000</span><span class="token punctuation">;</span><span class="token punctuation">}</span>InStream<span class="token operator">::</span><span class="token operator">~</span><span class="token function">InStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> reader<span class="token punctuation">;</span>        reader <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">resultExitCode</span><span class="token punctuation">(</span>TResult r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _ok<span class="token punctuation">)</span>        <span class="token keyword">return</span> OK_EXIT_CODE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _wa<span class="token punctuation">)</span>        <span class="token keyword">return</span> WA_EXIT_CODE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _pe<span class="token punctuation">)</span>        <span class="token keyword">return</span> PE_EXIT_CODE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _fail<span class="token punctuation">)</span>        <span class="token keyword">return</span> FAIL_EXIT_CODE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _dirt<span class="token punctuation">)</span>        <span class="token keyword">return</span> DIRT_EXIT_CODE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _points<span class="token punctuation">)</span>        <span class="token keyword">return</span> POINTS_EXIT_CODE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> _unexpected_eof<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> ENABLE_UNEXPECTED_EOF</span>        <span class="token keyword">return</span> UNEXPECTED_EOF_EXIT_CODE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>        <span class="token keyword">return</span> PE_EXIT_CODE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> _partially<span class="token punctuation">)</span>        <span class="token keyword">return</span> PC_BASE_EXIT_CODE <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> _partially<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> FAIL_EXIT_CODE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">textColor</span><span class="token punctuation">(</span><span class="token macro property">#<span class="token directive keyword">if</span> !(defined(ON_WINDOWS) &amp;&amp; (!defined(_MSC_VER) || _MSC_VER > 1400)) &amp;&amp; defined(__GNUC__)</span>        <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        WORD color<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(ON_WINDOWS) &amp;&amp; (!defined(_MSC_VER) || _MSC_VER > 1400)</span>    HANDLE handle <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span>STD_OUTPUT_HANDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetConsoleTextAttribute</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> !defined(ON_WINDOWS) &amp;&amp; defined(__GNUC__)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isatty</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> LightRed<span class="token operator">:</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\033[1;31m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LightCyan<span class="token operator">:</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\033[1;36m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LightGreen<span class="token operator">:</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\033[1;32m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LightYellow<span class="token operator">:</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\033[1;33m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LightGray<span class="token operator">:</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">halt</span><span class="token punctuation">(</span><span class="token keyword">int</span> exitCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> FOOTER</span>    InStream<span class="token operator">::</span><span class="token function">textColor</span><span class="token punctuation">(</span>InStream<span class="token operator">::</span>LightGray<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Checker: \"%s\"\n"</span><span class="token punctuation">,</span> checkerName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Exit code: %d\n"</span><span class="token punctuation">,</span> exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    InStream<span class="token operator">::</span><span class="token function">textColor</span><span class="token punctuation">(</span>InStream<span class="token operator">::</span>LightGray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    std<span class="token operator">::</span><span class="token function">exit</span><span class="token punctuation">(</span>exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">__testlib_shouldCheckDirt</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result <span class="token operator">==</span> _ok <span class="token operator">||</span> result <span class="token operator">==</span> _points <span class="token operator">||</span> result <span class="token operator">>=</span> _partially<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>extra<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> openPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> closePos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> InStream<span class="token operator">::</span>OPEN_BRACKET<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>openPos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                openPos <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                openPos <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> InStream<span class="token operator">::</span>CLOSE_BRACKET<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>closePos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                closePos <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                closePos <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>openPos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> openPos <span class="token operator">!=</span> INT_MAX        <span class="token operator">&amp;&amp;</span> closePos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> closePos <span class="token operator">!=</span> INT_MAX        <span class="token operator">&amp;&amp;</span> openPos <span class="token operator">&lt;</span> closePos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        size_t index <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>extra<span class="token punctuation">,</span> openPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos <span class="token operator">||</span> <span class="token keyword">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">>=</span> closePos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>string <span class="token function">result</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>closePos<span class="token punctuation">,</span> <span class="token string">", "</span> <span class="token operator">+</span> extra<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> message <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> InStream<span class="token operator">::</span>OPEN_BRACKET <span class="token operator">+</span> extra <span class="token operator">+</span> InStream<span class="token operator">::</span>CLOSE_BRACKET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">__testlib_toPrintableMessage</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> openPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> closePos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> InStream<span class="token operator">::</span>OPEN_BRACKET<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>openPos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                openPos <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                openPos <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> InStream<span class="token operator">::</span>CLOSE_BRACKET<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>closePos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                closePos <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                closePos <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>openPos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> openPos <span class="token operator">!=</span> INT_MAX        <span class="token operator">&amp;&amp;</span> closePos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> closePos <span class="token operator">!=</span> INT_MAX        <span class="token operator">&amp;&amp;</span> openPos <span class="token operator">&lt;</span> closePos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>string <span class="token function">result</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>openPos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'('</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>closePos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">')'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">quit</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TestlibFinalizeGuard<span class="token operator">::</span>alive<span class="token punctuation">)</span>        testlibFinalizeGuard<span class="token punctuation">.</span>quitCount<span class="token operator">++</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string <span class="token function">message</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    message <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__testlib_hasTestCase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> _ok<span class="token punctuation">)</span>            message <span class="token operator">=</span> <span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"test case "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>__testlib_testCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>__testlib_testCase <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                message <span class="token operator">=</span> <span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token function">vtos</span><span class="token punctuation">(</span>__testlib_testCase<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" test case"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                message <span class="token operator">=</span> <span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token function">vtos</span><span class="token punctuation">(</span>__testlib_testCase<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" test cases"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// You can change maxMessageLength.</span>    <span class="token comment" spellcheck="true">// Example: 'inf.maxMessageLength = 1024 * 1024;'.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxMessageLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>string warn <span class="token operator">=</span> <span class="token string">"message length exceeds "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxMessageLength<span class="token punctuation">)</span>                           <span class="token operator">+</span> <span class="token string">", the message is truncated: "</span><span class="token punctuation">;</span>        message <span class="token operator">=</span> warn <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxMessageLength <span class="token operator">-</span> warn<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ENABLE_UNEXPECTED_EOF</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> _unexpected_eof<span class="token punctuation">)</span>        result <span class="token operator">=</span> _pe<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!=</span> _output <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> _fail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> _input <span class="token operator">&amp;&amp;</span> testlibMode <span class="token operator">==</span> _validator <span class="token operator">&amp;&amp;</span> lastLine <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">quits</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span><span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"line "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>lastLine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">quits</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token function">__testlib_appendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>FILE <span class="token operator">*</span>resultFile<span class="token punctuation">;</span>    std<span class="token operator">::</span>string errorName<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_shouldCheckDirt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>testlibMode <span class="token operator">!=</span> _interactor <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ouf<span class="token punctuation">.</span><span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_dirt<span class="token punctuation">,</span> <span class="token string">"Extra information in the output file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> pctype <span class="token operator">=</span> result <span class="token operator">-</span> _partially<span class="token punctuation">;</span>    <span class="token keyword">bool</span> isPartial <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> _ok<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"ok "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightGreen<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> _wa<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"wrong answer "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightRed<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> _pe<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"wrong output format "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightRed<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> _fail<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"FAIL "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightRed<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> _dirt<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"wrong output format "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightCyan<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> _pe<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> _points<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"points "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightYellow<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> _unexpected_eof<span class="token operator">:</span>            errorName <span class="token operator">=</span> <span class="token string">"unexpected eof "</span><span class="token punctuation">;</span>            <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightCyan<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">>=</span> _partially<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errorName <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"partially correct (%d) "</span><span class="token punctuation">,</span> pctype<span class="token punctuation">)</span><span class="token punctuation">;</span>                isPartial <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">quitscrS</span><span class="token punctuation">(</span>LightYellow<span class="token punctuation">,</span> errorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"What is the code ??? "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultName <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultFile <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">fopen</span><span class="token punctuation">(</span>resultName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Can not write to the result file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>appesMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token string">"&lt;?xml version=\"1.0\" encoding=\"windows-1251\"?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPartial<span class="token punctuation">)</span>                std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token string">"&lt;result outcome = \"%s\" pctype = \"%d\">"</span><span class="token punctuation">,</span>                             outcomes<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> _partially<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pctype<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> _points<span class="token punctuation">)</span>                    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token string">"&lt;result outcome = \"%s\">"</span><span class="token punctuation">,</span> outcomes<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> result<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>__testlib_points <span class="token operator">==</span> std<span class="token operator">::</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">infinity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Expected points, but infinity found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    std<span class="token operator">::</span>string stringPoints <span class="token operator">=</span> <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.10f"</span><span class="token punctuation">,</span> __testlib_points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token string">"&lt;result outcome = \"%s\" points = \"%s\">"</span><span class="token punctuation">,</span>                                 outcomes<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> result<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stringPoints<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">xmlSafeWrite</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token function">__testlib_toPrintableMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token string">"&lt;/result>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token function">__testlib_toPrintableMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> resultFile <span class="token operator">||</span> <span class="token function">fclose</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Can not write to the result file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">quitscr</span><span class="token punctuation">(</span>LightGray<span class="token punctuation">,</span> <span class="token function">__testlib_toPrintableMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ouf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tout<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">textColor</span><span class="token punctuation">(</span>LightGray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultName <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>        std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"See file to check exit message\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">halt</span><span class="token punctuation">(</span><span class="token function">resultExitCode</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">quitf</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    InStream<span class="token operator">::</span><span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">quitif</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        InStream<span class="token operator">::</span><span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">quits</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> std<span class="token operator">::</span>string msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    InStream<span class="token operator">::</span><span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">xmlSafeWrite</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t lmsg <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lmsg<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%c"</span><span class="token punctuation">,</span> msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">quitscrS</span><span class="token punctuation">(</span>WORD color<span class="token punctuation">,</span> std<span class="token operator">::</span>string msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">quitscr</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">quitscr</span><span class="token punctuation">(</span>WORD color<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultName <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">textColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">textColor</span><span class="token punctuation">(</span>LightGray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">reset</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opened <span class="token operator">&amp;&amp;</span> stdfile<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Can't reset standard handle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opened<span class="token punctuation">)</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stdfile<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token punctuation">(</span>file <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">fopen</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> _output<span class="token punctuation">)</span>                <span class="token function">quits</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Output file not found: \""</span><span class="token punctuation">)</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> _answer<span class="token punctuation">)</span>                <span class="token function">quits</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Answer file not found: \""</span><span class="token punctuation">)</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        opened <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stdfile<span class="token punctuation">)</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">FileInputStreamReader</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">BufferedFileInputStreamReader</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        opened <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        reader <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string fileName<span class="token punctuation">,</span> TMode mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    opened <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> fileName<span class="token punctuation">;</span>    stdfile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>    std<span class="token operator">::</span>ifstream stream<span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>streampos start <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">tellg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">seekg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">::</span>ios<span class="token operator">::</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>streampos end <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">tellg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size_t fileSize <span class="token operator">=</span> <span class="token function">size_t</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// You can change maxFileSize.</span>        <span class="token comment" spellcheck="true">// Example: 'inf.maxFileSize = 256 * 1024 * 1024;'.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileSize <span class="token operator">></span> maxFileSize<span class="token punctuation">)</span>            <span class="token function">quitf</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token string">"File size exceeds %d bytes, size is %d"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>maxFileSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>fileSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>std<span class="token operator">::</span>FILE <span class="token operator">*</span>f<span class="token punctuation">,</span> TMode mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    opened <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> <span class="token string">"untitled"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">stdin</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token string">"stdin"</span><span class="token punctuation">,</span> stdfile <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">stdout</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token string">"stdout"</span><span class="token punctuation">,</span> stdfile <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">stderr</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token string">"stderr"</span><span class="token punctuation">,</span> stdfile <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">reset</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> InStream<span class="token operator">::</span><span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">char</span><span class="token punctuation">(</span>reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> InStream<span class="token operator">::</span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">char</span><span class="token punctuation">(</span>reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> InStream<span class="token operator">::</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> InStream<span class="token operator">::</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lastLine <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> found <span class="token operator">=</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> found<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEoln</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Unexpected character '"</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> found<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"', but '"</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span>                       <span class="token string">"' expected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Unexpected character "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", but '"</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span>                       <span class="token string">"' expected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> found<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> InStream<span class="token operator">::</span><span class="token function">readSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">unreadChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">skipBlanks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isBlanks</span><span class="token punctuation">(</span>reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">skipChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _tmpReadToken<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readWordTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict<span class="token punctuation">)</span>        <span class="token function">skipBlanks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastLine <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> EOFC<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file - token expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlanks</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token string">"Unexpected white-space - token expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">isBlanks</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">||</span> cur <span class="token operator">==</span> EOFC<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// You can change maxTokenLength.</span>        <span class="token comment" spellcheck="true">// Example: 'inf.maxTokenLength = 128 * 1024 * 1024;'.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxTokenLength<span class="token punctuation">)</span>            <span class="token function">quitf</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token string">"Length of token exceeds %d, token is '%s...'"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>maxTokenLength<span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file or white-space - token expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readTokenTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> std<span class="token operator">::</span>string <span class="token function">__testlib_part</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">define</span> __testlib_readMany(readMany, readOne, typeName, space)                  \    if (size &lt; 0)                                                               \        quit(_fail, #readMany ": size should be non-negative.");                \    if (size > 100000000)                                                       \        quit(_fail, #readMany ": size should be at most 100000000.");           \                                                                                \    std::vector&lt;typeName> result(size);                                         \    readManyIteration = indexBase;                                              \                                                                                \    for (int i = 0; i &lt; size; i++)                                              \    {                                                                           \        result[i] = readOne;                                                    \        readManyIteration++;                                                    \        if (strict &amp;&amp; space &amp;&amp; i + 1 &lt; size)                                              \            readSpace();                                                        \    }                                                                           \                                                                                \    readManyIteration = NO_INDEX;                                               \    return result;                                                              \</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readWord</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Token \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                      <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Token parameter [name="</span> <span class="token operator">+</span> variableName <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"\", doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Token element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span>                           <span class="token function">__testlib_part</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Token element "</span> <span class="token operator">+</span> variableName <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span>                           <span class="token function">__testlib_part</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\", doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> _tmpReadToken<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readWords<span class="token punctuation">,</span> <span class="token function">readWord</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readWords<span class="token punctuation">,</span> <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readWord</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token function">pattern</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pattern <span class="token function">p</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readWords<span class="token punctuation">,</span> <span class="token function">readWord</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWord</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readTokens</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readTokens<span class="token punctuation">,</span> <span class="token function">readToken</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readTokens</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readTokens<span class="token punctuation">,</span> <span class="token function">readToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWord</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readTokens</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pattern <span class="token function">p</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readTokens<span class="token punctuation">,</span> <span class="token function">readWord</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readWordTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Token \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                       <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Token parameter [name="</span> <span class="token operator">+</span> variableName <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                       <span class="token string">"\", doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readWordTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWordTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">pattern</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readTokenTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWordTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readTokenTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readWordTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ptrn<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> integer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">==</span> LLONG_MIN<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"-9223372036854775808"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">==</span> <span class="token number">0LL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    size_t length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        s<span class="token operator">++</span><span class="token punctuation">,</span> length<span class="token operator">--</span><span class="token punctuation">,</span> integer <span class="token operator">=</span> <span class="token operator">-</span>integer<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>integer <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>integer <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token operator">+</span> digit<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        length<span class="token operator">--</span><span class="token punctuation">;</span>        integer <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> integer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">==</span> ULLONG_MAX<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"18446744073709551615"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">==</span> <span class="token number">0ULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    size_t length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>integer <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>integer <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token operator">+</span> digit<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        length<span class="token operator">--</span><span class="token punctuation">;</span>        integer <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">stringToDouble</span><span class="token punctuation">(</span>InStream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> retval<span class="token punctuation">;</span>    size_t length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minusCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> plusCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> decimalPointCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> digitCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> eCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span>            <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span>            <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>                digitCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">)</span>                eCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>                minusCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>                plusCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>                decimalPointCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If for sure is not a number in standard notation or in e-notation.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>digitCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> minusCount <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">||</span> plusCount <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">||</span> decimalPointCount <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> eCount <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>suffix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> scanned <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">sscanf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"%lf%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> empty <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> suffix<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanned <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span>scanned <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> empty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span>retval<span class="token punctuation">)</span><span class="token punctuation">)</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">double</span><span class="token function">stringToStrictDouble</span><span class="token punctuation">(</span>InStream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minAfterPointDigitCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"stringToStrictDouble: minAfterPointDigitCount should be non-negative."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minAfterPointDigitCount <span class="token operator">></span> maxAfterPointDigitCount<span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span>                <span class="token string">"stringToStrictDouble: minAfterPointDigitCount should be less or equal to maxAfterPointDigitCount."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> retval<span class="token punctuation">;</span>    size_t length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> length <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pointPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pointPos <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pointPos <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> afterDigitsCount <span class="token operator">=</span> <span class="token punctuation">(</span>pointPos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">-</span> pointPos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>afterDigitsCount <span class="token operator">&lt;</span> minAfterPointDigitCount <span class="token operator">||</span> afterDigitsCount <span class="token operator">></span> maxAfterPointDigitCount<span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double with number of digits after point in range ["</span>                      <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minAfterPointDigitCount<span class="token punctuation">)</span>                      <span class="token operator">+</span> <span class="token string">","</span>                      <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxAfterPointDigitCount<span class="token punctuation">)</span>                      <span class="token operator">+</span> <span class="token string">"], but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> firstDigitPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstDigitPos <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstDigitPos <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> firstDigitPos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>firstDigitPos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> firstDigitPos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span>firstDigitPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span>firstDigitPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected strict double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>suffix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> scanned <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">sscanf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"%lf%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>retval<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> empty <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> suffix<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanned <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span>scanned <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> empty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span>retval<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">__testlib_isInfinite</span><span class="token punctuation">(</span>retval<span class="token punctuation">)</span><span class="token punctuation">)</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> retval <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Redundant minus in \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected double, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">stringToLongLong</span><span class="token punctuation">(</span>InStream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"-9223372036854775808"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> LLONG_MIN<span class="token punctuation">;</span>    <span class="token keyword">bool</span> minus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    size_t length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>        minus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> retval <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> zeroes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> processingZeroes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>minus <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> processingZeroes<span class="token punctuation">)</span>            zeroes<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            processingZeroes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retval <span class="token operator">=</span> retval <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>zeroes <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> minus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> zeroes <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    retval <span class="token operator">=</span> <span class="token punctuation">(</span>minus <span class="token operator">?</span> <span class="token operator">-</span>retval <span class="token operator">:</span> <span class="token operator">+</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">19</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equals</span><span class="token punctuation">(</span>retval<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token keyword">else</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected int64, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">stringToUnsignedLongLong</span><span class="token punctuation">(</span>InStream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected unsigned integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected unsigned integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> retval <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>            in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected unsigned integer, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retval <span class="token operator">=</span> retval <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">19</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"18446744073709551615"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected unsigned int64, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equals</span><span class="token punctuation">(</span>retval<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token keyword">else</span>        in<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected unsigned int64, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> InStream<span class="token operator">::</span><span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file - int32 expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token function">stringToLongLong</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> _tmpReadToken<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> INT_MIN <span class="token operator">||</span> value <span class="token operator">></span> INT_MAX<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Expected int32, but \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" found"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> InStream<span class="token operator">::</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file - int64 expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">stringToLongLong</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> _tmpReadToken<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> InStream<span class="token operator">::</span><span class="token function">readUnsignedLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file - int64 expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readWordTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">stringToUnsignedLongLong</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> _tmpReadToken<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> InStream<span class="token operator">::</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> minv <span class="token operator">||</span> result <span class="token operator">></span> maxv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Integer "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Integer parameter [name="</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Integer element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Integer element "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span>                      <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        validator<span class="token punctuation">.</span><span class="token function">addBoundsHit</span><span class="token punctuation">(</span>variableName<span class="token punctuation">,</span> <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span>minv <span class="token operator">==</span> result<span class="token punctuation">,</span> maxv <span class="token operator">==</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readLongs<span class="token punctuation">,</span> <span class="token function">readLong</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readLongs<span class="token punctuation">,</span> <span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>InStream<span class="token operator">::</span><span class="token function">readUnsignedLong</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">readUnsignedLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> minv <span class="token operator">||</span> result <span class="token operator">></span> maxv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Unsigned integer "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                      <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Unsigned integer parameter [name="</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                      <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Unsigned integer element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                      <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Unsigned integer element "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        validator<span class="token punctuation">.</span><span class="token function">addBoundsHit</span><span class="token punctuation">(</span>variableName<span class="token punctuation">,</span> <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span>minv <span class="token operator">==</span> result<span class="token punctuation">,</span> maxv <span class="token operator">==</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readUnsignedLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span>                                                            <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readUnsignedLongs<span class="token punctuation">,</span> <span class="token function">readUnsignedLong</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readUnsignedLongs</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readUnsignedLongs<span class="token punctuation">,</span> <span class="token function">readUnsignedLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>InStream<span class="token operator">::</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> minv<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readUnsignedLong</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> InStream<span class="token operator">::</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> InStream<span class="token operator">::</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> minv <span class="token operator">||</span> result <span class="token operator">></span> maxv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Integer "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Integer parameter [name="</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Integer element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Integer element "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span>                      <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">toHumanReadableString</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        validator<span class="token punctuation">.</span><span class="token function">addBoundsHit</span><span class="token punctuation">(</span>variableName<span class="token punctuation">,</span> <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span>minv <span class="token operator">==</span> result<span class="token punctuation">,</span> maxv <span class="token operator">==</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> InStream<span class="token operator">::</span><span class="token function">readInteger</span><span class="token punctuation">(</span><span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readInt</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readInts</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readInts<span class="token punctuation">,</span> <span class="token function">readInt</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readInts</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readInts<span class="token punctuation">,</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readIntegers</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> minv<span class="token punctuation">,</span> <span class="token keyword">int</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readIntegers<span class="token punctuation">,</span> <span class="token function">readInt</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readIntegers</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readIntegers<span class="token punctuation">,</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">double</span> InStream<span class="token operator">::</span><span class="token function">readReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file - double expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">stringToDouble</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> InStream<span class="token operator">::</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> InStream<span class="token operator">::</span><span class="token function">readReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">readReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> minv <span class="token operator">||</span> result <span class="token operator">></span> maxv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Double "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Double parameter [name="</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Double element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Double element "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span>                      <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        validator<span class="token punctuation">.</span><span class="token function">addBoundsHit</span><span class="token punctuation">(</span>variableName<span class="token punctuation">,</span> <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span>                <span class="token function">doubleDelta</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ValidatorBoundsHit<span class="token operator">::</span>EPS<span class="token punctuation">,</span>                <span class="token function">doubleDelta</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ValidatorBoundsHit<span class="token operator">::</span>EPS        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readReals</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readReals<span class="token punctuation">,</span> <span class="token function">readReal</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readReals</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readReals<span class="token punctuation">,</span> <span class="token function">readReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">double</span> InStream<span class="token operator">::</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readReal</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readDoubles</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readDoubles<span class="token punctuation">,</span> <span class="token function">readDouble</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readDoubles</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readDoubles<span class="token punctuation">,</span> <span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">double</span> InStream<span class="token operator">::</span><span class="token function">readStrictReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                                <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                                <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_unexpected_eof<span class="token punctuation">,</span> <span class="token string">"Unexpected end of file - strict double expected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">stringToStrictDouble</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">readWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         minAfterPointDigitCount<span class="token punctuation">,</span> maxAfterPointDigitCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> minv <span class="token operator">||</span> result <span class="token operator">></span> maxv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Strict double "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Strict double parameter [name="</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                      <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Strict double element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Strict double element "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"] equals to "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", violates the range ["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>minv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        validator<span class="token punctuation">.</span><span class="token function">addBoundsHit</span><span class="token punctuation">(</span>variableName<span class="token punctuation">,</span> <span class="token function">ValidatorBoundsHit</span><span class="token punctuation">(</span>                <span class="token function">doubleDelta</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ValidatorBoundsHit<span class="token operator">::</span>EPS<span class="token punctuation">,</span>                <span class="token function">doubleDelta</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">&lt;</span> ValidatorBoundsHit<span class="token operator">::</span>EPS        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readStrictReals</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                                              <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                                              <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readStrictReals<span class="token punctuation">,</span>                       <span class="token function">readStrictReal</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> minAfterPointDigitCount<span class="token punctuation">,</span> maxAfterPointDigitCount<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">double</span> InStream<span class="token operator">::</span><span class="token function">readStrictDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                                  <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                                  <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readStrictReal</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span>                          minAfterPointDigitCount<span class="token punctuation">,</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                          variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readStrictDoubles</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">double</span> minv<span class="token punctuation">,</span> <span class="token keyword">double</span> maxv<span class="token punctuation">,</span>                                                <span class="token keyword">int</span> minAfterPointDigitCount<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAfterPointDigitCount<span class="token punctuation">,</span>                                                <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readStrictDoubles<span class="token punctuation">,</span>                       <span class="token function">readStrictDouble</span><span class="token punctuation">(</span>minv<span class="token punctuation">,</span> maxv<span class="token punctuation">,</span> minAfterPointDigitCount<span class="token punctuation">,</span> maxAfterPointDigitCount<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">bool</span> InStream<span class="token operator">::</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">==</span> reader<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> InStream<span class="token operator">::</span><span class="token function">seekEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">==</span> reader<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">skipBlanks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> InStream<span class="token operator">::</span><span class="token function">eoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">==</span> reader<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> EOFC<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> CR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> LF<span class="token punctuation">)</span> <span class="token punctuation">{</span>                reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>CR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> LF<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> returnCr <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> (defined(ON_WINDOWS) &amp;&amp; !defined(FOR_LINUX)) || defined(FOR_WINDOWS)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> CR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>returnCr<span class="token punctuation">)</span>                returnCr <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> LF<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>returnCr<span class="token punctuation">)</span>                reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>CR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readEoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lastLine <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">eoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token string">"Expected EOLN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readEof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lastLine <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token string">"Expected EOF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TestlibFinalizeGuard<span class="token operator">::</span>alive <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>inf<span class="token punctuation">)</span>        testlibFinalizeGuard<span class="token punctuation">.</span>readEofCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> InStream<span class="token operator">::</span><span class="token function">seekEoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strict <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">==</span> reader<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> SPACE <span class="token operator">||</span> cur <span class="token operator">==</span> TAB<span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">eoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readStringTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> reader<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_pe<span class="token punctuation">,</span> <span class="token string">"Expected line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> LF <span class="token operator">||</span> cur <span class="token operator">==</span> EOFC<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> CR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">curChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> LF<span class="token punctuation">)</span> <span class="token punctuation">{</span>                reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">unreadChar</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        lastLine <span class="token operator">=</span> reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strict<span class="token punctuation">)</span>        <span class="token function">readEoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">eoln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _tmpReadToken<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readStrings<span class="token punctuation">,</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readStringTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readManyIteration <span class="token operator">==</span> NO_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Line \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Line [name="</span> <span class="token operator">+</span> variableName <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                           <span class="token string">"\", doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variableName<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Line element [index="</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span>                      <span class="token string">"\" doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"Line element "</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>variableName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">vtos</span><span class="token punctuation">(</span>readManyIteration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] equals to \""</span> <span class="token operator">+</span>                      <span class="token function">__testlib_part</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\", doesn't correspond to pattern \""</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readStringTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">pattern</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">,</span> p<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _tmpReadToken<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readStrings<span class="token punctuation">,</span> <span class="token function">readString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>_tmpReadToken<span class="token punctuation">,</span> ptrn<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _tmpReadToken<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readStrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pattern <span class="token function">p</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readStrings<span class="token punctuation">,</span> <span class="token function">readString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readLineTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> InStream<span class="token operator">::</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readLines<span class="token punctuation">,</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readLineTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">readLineTo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">readStringTo</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ptrn<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> pattern <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readLines<span class="token punctuation">,</span> <span class="token function">readString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string InStream<span class="token operator">::</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">readString</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">,</span> variableName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span>InStream<span class="token operator">::</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>ptrn<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>variablesName<span class="token punctuation">,</span> <span class="token keyword">int</span> indexBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pattern <span class="token function">p</span><span class="token punctuation">(</span>ptrn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_readMany</span><span class="token punctuation">(</span>readLines<span class="token punctuation">,</span> <span class="token function">readString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> variablesName<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">ensuref</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__testlib_ensure</span><span class="token punctuation">(</span>cond<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">__testlib_ensure</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> std<span class="token operator">::</span>string message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cond<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">quit</span><span class="token punctuation">(</span>_wa<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> InStream<span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reader<span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> reader<span class="token punctuation">;</span>        reader <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    opened <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ouf<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ouf<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">__testlib_quitp</span><span class="token punctuation">(</span><span class="token keyword">double</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __testlib_points <span class="token operator">=</span> points<span class="token punctuation">;</span>    std<span class="token operator">::</span>string stringPoints <span class="token operator">=</span> <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.10f"</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string quitMessage<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> message <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>        quitMessage <span class="token operator">=</span> stringPoints<span class="token punctuation">;</span>    <span class="token keyword">else</span>        quitMessage <span class="token operator">=</span> stringPoints <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token function">quit</span><span class="token punctuation">(</span>_points<span class="token punctuation">,</span> quitMessage<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">__testlib_quitp</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __testlib_points <span class="token operator">=</span> points<span class="token punctuation">;</span>    std<span class="token operator">::</span>string stringPoints <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string quitMessage<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> message <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>        quitMessage <span class="token operator">=</span> stringPoints<span class="token punctuation">;</span>    <span class="token keyword">else</span>        quitMessage <span class="token operator">=</span> stringPoints <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token function">quit</span><span class="token punctuation">(</span>_points<span class="token punctuation">,</span> quitMessage<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">quitp</span><span class="token punctuation">(</span><span class="token keyword">float</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_quitp</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">quitp</span><span class="token punctuation">(</span><span class="token keyword">double</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_quitp</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">quitp</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_quitp</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">quitp</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_quitp</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> F<span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span> <span class="token function">quitp</span><span class="token punctuation">(</span>F points<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quitp</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span> <span class="token function">quitf</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">quitif</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">__testlib_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    InStream<span class="token operator">::</span><span class="token function">textColor</span><span class="token punctuation">(</span>InStream<span class="token operator">::</span>LightCyan<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"TESTLIB %s, https://github.com/MikeMirzayanov/testlib/ "</span><span class="token punctuation">,</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"by Mike Mirzayanov, copyright(c) 2005-2020\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Checker name: \"%s\"\n"</span><span class="token punctuation">,</span> checkerName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InStream<span class="token operator">::</span><span class="token function">textColor</span><span class="token punctuation">(</span>InStream<span class="token operator">::</span>LightGray<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Latest features: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>latestFeatures<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"*) %s\n"</span><span class="token punctuation">,</span> latestFeatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Program must be run with the following arguments: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"    &lt;input-file> &lt;output-file> &lt;answer-file> [&lt;report-file> [&lt;-appes>]]\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span><span class="token function">exit</span><span class="token punctuation">(</span>FAIL_EXIT_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__testlib_ensuresPreconditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// testlib assumes: sizeof(int) = 4.</span>    <span class="token function">__TESTLIB_STATIC_ASSERT</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// testlib assumes: INT_MAX == 2147483647.</span>    <span class="token function">__TESTLIB_STATIC_ASSERT</span><span class="token punctuation">(</span>INT_MAX <span class="token operator">==</span> <span class="token number">2147483647</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// testlib assumes: sizeof(long long) = 8.</span>    <span class="token function">__TESTLIB_STATIC_ASSERT</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// testlib assumes: sizeof(double) = 8.</span>    <span class="token function">__TESTLIB_STATIC_ASSERT</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// testlib assumes: no -ffast-math.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token function">__testlib_nan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Function __testlib_isNaN is not working correctly: possible reason is '-ffast-math'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__testlib_isNaN</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token function">__testlib_nan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Function __testlib_isNaN is not working correctly: possible reason is '-ffast-math'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">registerGen</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> randomGeneratorVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>randomGeneratorVersion <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> randomGeneratorVersion <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">quitf</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Random generator version is expected to be 0 or 1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    random_t<span class="token operator">::</span>version <span class="token operator">=</span> randomGeneratorVersion<span class="token punctuation">;</span>    <span class="token function">__testlib_ensuresPreconditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testlibMode <span class="token operator">=</span> _generator<span class="token punctuation">;</span>    <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rnd<span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> __cplusplus > 199711L || defined(_MSC_VER)</span>    <span class="token function">prepareOpts</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> USE_RND_AS_BEFORE_087</span><span class="token keyword">void</span> <span class="token function">registerGen</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">registerGen</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token macro property">#<span class="token directive keyword">if</span> (__GNUC__ > 4) || ((__GNUC__ == 4) &amp;&amp; (__GNUC_MINOR__ > 4))</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">deprecated</span><span class="token punctuation">(</span><span class="token string">"Use registerGen(argc, argv, 0) or registerGen(argc, argv, 1)."</span><span class="token string">" The third parameter stands for the random generator version."</span><span class="token string">" If you are trying to compile old generator use macro -DUSE_RND_AS_BEFORE_087 or registerGen(argc, argv, 0)."</span><span class="token string">" Version 1 has been released on Spring, 2013. Use it to write new generators."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deprecated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _MSC_VER</span><span class="token function">__declspec</span><span class="token punctuation">(</span><span class="token function">deprecated</span><span class="token punctuation">(</span><span class="token string">"Use registerGen(argc, argv, 0) or registerGen(argc, argv, 1)."</span>        <span class="token string">" The third parameter stands for the random generator version."</span>        <span class="token string">" If you are trying to compile old generator use macro -DUSE_RND_AS_BEFORE_087 or registerGen(argc, argv, 0)."</span>        <span class="token string">" Version 1 has been released on Spring, 2013. Use it to write new generators."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">registerGen</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Use registerGen(argc, argv, 0) or registerGen(argc, argv, 1)."</span>                         <span class="token string">" The third parameter stands for the random generator version."</span>                         <span class="token string">" If you are trying to compile old generator use macro -DUSE_RND_AS_BEFORE_087 or registerGen(argc, argv, 0)."</span>                         <span class="token string">" Version 1 has been released on Spring, 2013. Use it to write new generators.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerGen</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">registerInteraction</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_ensuresPreconditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testlibMode <span class="token operator">=</span> _interactor<span class="token punctuation">;</span>    <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"--help"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> argc <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Program must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"&lt;input-file> &lt;output-file> [&lt;answer-file> [&lt;report-file> [&lt;-appes>]]]"</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"\nUse \"--help\" to get help information"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        appesMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> EJUDGE</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        appesMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"-APPES"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"-appes"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Program must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">"&lt;input-file> &lt;output-file> &lt;answer-file> [&lt;report-file> [&lt;-appes>]]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            resultName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            appesMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    inf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _input<span class="token punctuation">)</span><span class="token punctuation">;</span>    tout<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token operator">::</span>ios_base<span class="token operator">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tout<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>tout<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Can not write to the test-output-file '"</span><span class="token punctuation">)</span> <span class="token operator">+</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ouf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> _output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span>        ans<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _answer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ans<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"unopened answer stream"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">registerValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_ensuresPreconditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testlibMode <span class="token operator">=</span> _validator<span class="token punctuation">;</span>    <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> _input<span class="token punctuation">)</span><span class="token punctuation">;</span>    inf<span class="token punctuation">.</span>strict <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">registerValidation</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">registerValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"--testset"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                validator<span class="token punctuation">.</span><span class="token function">setTestset</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Validator must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"[--testset testset] [--group group] [--testOverviewLogFileName fileName]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"--group"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span>                validator<span class="token punctuation">.</span><span class="token function">setGroup</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Validator must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"[--testset testset] [--group group] [--testOverviewLogFileName fileName]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"--testOverviewLogFileName"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span>                validator<span class="token punctuation">.</span><span class="token function">setTestOverviewLogFileName</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Validator must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"[--testset testset] [--group group] [--testOverviewLogFileName fileName]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">addFeature</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>feature<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>testlibMode <span class="token operator">!=</span> _validator<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Features are supported in validators only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">addFeature</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">feature</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>feature<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>testlibMode <span class="token operator">!=</span> _validator<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Features are supported in validators only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    validator<span class="token punctuation">.</span><span class="token function">feature</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">registerTestlibCmd</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_ensuresPreconditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testlibMode <span class="token operator">=</span> _checker<span class="token punctuation">;</span>    <span class="token function">__testlib_set_binary</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"--help"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> argc <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Program must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"&lt;input-file> &lt;output-file> &lt;answer-file> [&lt;report-file> [&lt;-appes>]]"</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"\nUse \"--help\" to get help information"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        appesMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        appesMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"-APPES"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"-appes"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Program must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">"&lt;input-file> &lt;output-file> &lt;answer-file> [&lt;report-file> [&lt;-appes>]]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            resultName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            appesMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    inf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _input<span class="token punctuation">)</span><span class="token punctuation">;</span>    ouf<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _output<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">registerTestlib</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> argc <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Program must be run with the following arguments: "</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"&lt;input-file> &lt;output-file> &lt;answer-file> [&lt;report-file> [&lt;-appes>]]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">[</span>argc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    va_list ap<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerTestlibCmd</span><span class="token punctuation">(</span>argc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__testlib_ensure</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cond<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__testlib_ensure</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cond<span class="token punctuation">)</span>        <span class="token function">quit</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">define</span> ensure(cond) __testlib_ensure(cond, "Condition failed: \"" #cond "\"")</span><span class="token macro property">#<span class="token directive keyword">define</span> STRINGIZE_DETAIL(x) #x</span><span class="token macro property">#<span class="token directive keyword">define</span> STRINGIZE(x) STRINGIZE_DETAIL(x)</span><span class="token macro property">#<span class="token directive keyword">define</span> ensure_ext(cond) __testlib_ensure(cond, "Line " STRINGIZE(__LINE__) ": Condition failed: \"" #cond "\"")</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ensuref</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cond<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cond<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">__testlib_ensure</span><span class="token punctuation">(</span>cond<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">quitf</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> format<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    checkerName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * Do not use random_shuffle, because it will produce different result * for different C++ compilers. * * This implementation uses testlib random_t to produce random numbers, so * it is stable. */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _RandomAccessIter<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>_RandomAccessIter __first<span class="token punctuation">,</span> _RandomAccessIter __last<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__first <span class="token operator">==</span> __last<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>_RandomAccessIter __i <span class="token operator">=</span> __first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> __i <span class="token operator">!=</span> __last<span class="token punctuation">;</span> <span class="token operator">++</span>__i<span class="token punctuation">)</span>        std<span class="token operator">::</span><span class="token function">iter_swap</span><span class="token punctuation">(</span>__i<span class="token punctuation">,</span> __first <span class="token operator">+</span> rnd<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>__i <span class="token operator">-</span> __first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _RandomAccessIter<span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__GNUC__) &amp;&amp; !defined(__clang__)</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Don't use random_shuffle(), use shuffle() instead"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">random_shuffle</span><span class="token punctuation">(</span>_RandomAccessIter<span class="token punctuation">,</span> _RandomAccessIter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">quitf</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Don't use random_shuffle(), use shuffle() instead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GLIBC__</span><span class="token macro property">#  <span class="token directive keyword">define</span> RAND_THROW_STATEMENT throw()</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#  <span class="token directive keyword">define</span> RAND_THROW_STATEMENT</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__GNUC__) &amp;&amp; !defined(__clang__)</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Don't use rand(), use rnd.next() instead"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _MSC_VER</span><span class="token macro property">#   <span class="token directive keyword">pragma</span> warning( disable : 4273 )</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RAND_THROW_STATEMENT<span class="token punctuation">{</span>    <span class="token function">quitf</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Don't use rand(), use rnd.next() instead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* This line never runs. */</span>    <span class="token comment" spellcheck="true">//throw "Don't use rand(), use rnd.next() instead";</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__GNUC__) &amp;&amp; !defined(__clang__)</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Don't use srand(), you should use "</span><span class="token string">"'registerGen(argc, argv, 1);' to initialize generator seed "</span><span class="token string">"by hash code of the command line params. The third parameter "</span><span class="token string">"is randomGeneratorVersion (currently the latest is 1)."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _MSC_VER</span><span class="token macro property">#   <span class="token directive keyword">pragma</span> warning( disable : 4273 )</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> RAND_THROW_STATEMENT<span class="token punctuation">{</span>    <span class="token function">quitf</span><span class="token punctuation">(</span>_fail<span class="token punctuation">,</span> <span class="token string">"Don't use srand(), you should use "</span>                 <span class="token string">"'registerGen(argc, argv, 1);' to initialize generator seed "</span>                 <span class="token string">"by hash code of the command line params. The third parameter "</span>                 <span class="token string">"is randomGeneratorVersion (currently the latest is 1) [ignored seed=%d]."</span><span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">startTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>string testFileName <span class="token operator">=</span> <span class="token function">vtos</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">freopen</span><span class="token punctuation">(</span>testFileName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wt"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Unable to write file '"</span> <span class="token operator">+</span> testFileName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> std<span class="token operator">::</span>string <span class="token function">upperCase</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> std<span class="token operator">::</span>string <span class="token function">lowerCase</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> std<span class="token operator">::</span>string <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">__testlib_part</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> std<span class="token operator">::</span>string <span class="token function">englishEnding</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"th"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"st"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"nd"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"rd"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"th"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _ForwardIterator<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Separator<span class="token operator">></span>std<span class="token operator">::</span>string <span class="token function">join</span><span class="token punctuation">(</span>_ForwardIterator first<span class="token punctuation">,</span> _ForwardIterator last<span class="token punctuation">,</span> _Separator separator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>stringstream ss<span class="token punctuation">;</span>    <span class="token keyword">bool</span> repeated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>_ForwardIterator i <span class="token operator">=</span> first<span class="token punctuation">;</span> i <span class="token operator">!=</span> last<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>repeated<span class="token punctuation">)</span>            ss <span class="token operator">&lt;&lt;</span> separator<span class="token punctuation">;</span>        <span class="token keyword">else</span>            repeated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ss <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _ForwardIterator<span class="token operator">></span>std<span class="token operator">::</span>string <span class="token function">join</span><span class="token punctuation">(</span>_ForwardIterator first<span class="token punctuation">,</span> _ForwardIterator last<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">join</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Collection<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Separator<span class="token operator">></span>std<span class="token operator">::</span>string <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Collection <span class="token operator">&amp;</span>collection<span class="token punctuation">,</span> _Separator separator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">join</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> separator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Collection<span class="token operator">></span>std<span class="token operator">::</span>string <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Collection <span class="token operator">&amp;</span>collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">join</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Splits string s by character separator returning exactly k+1 items, * where k is the number of separator occurences. */</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> separator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> result<span class="token punctuation">;</span>    std<span class="token operator">::</span>string item<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> separator<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            item <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            item <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Splits string s by character separators returning exactly k+1 items, * where k is the number of separator occurences. */</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>separators<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>separators<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">isSeparator</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> separators<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        isSeparator<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>separators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> result<span class="token punctuation">;</span>    std<span class="token operator">::</span>string item<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSeparator<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            item <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            item <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Splits string s by character separator returning non-empty items. */</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> separator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> result<span class="token punctuation">;</span>    std<span class="token operator">::</span>string item<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> separator<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            item <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            item <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Splits string s by character separators returning non-empty items. */</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>separators<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>separators<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">isSeparator</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> separators<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        isSeparator<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>separators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> result<span class="token punctuation">;</span>    std<span class="token operator">::</span>string item<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSeparator<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            item <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            item <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> std<span class="token operator">::</span>string expected<span class="token punctuation">,</span> std<span class="token operator">::</span>string found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prepend<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string message<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>prepend<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s: expected '%s', but found '%s'"</span><span class="token punctuation">,</span>                         <span class="token function">compress</span><span class="token punctuation">(</span>prepend<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">compress</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">compress</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        message <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"expected '%s', but found '%s'"</span><span class="token punctuation">,</span>                         <span class="token function">compress</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">compress</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quit</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NORETURN <span class="token keyword">void</span> <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">double</span> expected<span class="token punctuation">,</span> <span class="token keyword">double</span> found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prepend<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string expectedString <span class="token operator">=</span> <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.12f"</span><span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string foundString <span class="token operator">=</span> <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.12f"</span><span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expectedString<span class="token punctuation">,</span> foundString<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span> <span class="token function">expectedButFound</span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> T expected<span class="token punctuation">,</span> T found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prependFormat <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>prependFormat<span class="token punctuation">,</span> prependFormat<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string expectedString <span class="token operator">=</span> <span class="token function">vtos</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string foundString <span class="token operator">=</span> <span class="token function">vtos</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expectedString<span class="token punctuation">,</span> foundString<span class="token punctuation">,</span> prepend<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span>expectedButFound<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> std<span class="token operator">::</span>string expected<span class="token punctuation">,</span> std<span class="token operator">::</span>string found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prependFormat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>prependFormat<span class="token punctuation">,</span> prependFormat<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> found<span class="token punctuation">,</span> prepend<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span> expectedButFound<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">double</span> expected<span class="token punctuation">,</span> <span class="token keyword">double</span> found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prependFormat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>prependFormat<span class="token punctuation">,</span> prependFormat<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string expectedString <span class="token operator">=</span> <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.12f"</span><span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string foundString <span class="token operator">=</span> <span class="token function">removeDoubleTrailingZeroes</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.12f"</span><span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expectedString<span class="token punctuation">,</span> foundString<span class="token punctuation">,</span> prepend<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span>expectedButFound<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>expected<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prependFormat<span class="token punctuation">,</span>                               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>prependFormat<span class="token punctuation">,</span> prependFormat<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">,</span> prepend<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span> expectedButFound<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">float</span> expected<span class="token punctuation">,</span> <span class="token keyword">float</span> found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prependFormat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>prependFormat<span class="token punctuation">,</span> prependFormat<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">,</span> prepend<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __GNUC__</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">format</span> <span class="token punctuation">(</span>printf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>NORETURN <span class="token keyword">void</span>expectedButFound<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>TResult result<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">double</span> expected<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">double</span> found<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prependFormat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">FMT_TO_RESULT</span><span class="token punctuation">(</span>prependFormat<span class="token punctuation">,</span> prependFormat<span class="token punctuation">,</span> prepend<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__testlib_expectedButFound</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">,</span> prepend<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> __cplusplus > 199711L || defined(_MSC_VER)</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">struct</span> is_iterable <span class="token punctuation">{</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> U<span class="token operator">></span>    <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">typename</span> U<span class="token operator">::</span>iterator <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> U<span class="token operator">></span>    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">test</span><span class="token punctuation">(</span>U <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>test<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> B<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token keyword">struct</span> __testlib_enable_if <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> __testlib_enable_if<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">typedef</span> T type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">typename</span> __testlib_enable_if<span class="token operator">&lt;</span><span class="token operator">!</span>is_iterable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token operator">::</span>type <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">typename</span> __testlib_enable_if<span class="token operator">&lt;</span>is_iterable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token operator">::</span>type <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">typename</span> T<span class="token operator">::</span>const_iterator i <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span>            first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token keyword">typename</span> __testlib_enable_if<span class="token operator">&lt;</span>is_iterable<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token operator">::</span>type__testlib_print_one<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">__println_range</span><span class="token punctuation">(</span>A begin<span class="token punctuation">,</span> B end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>B i <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span>            first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Enable</span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token keyword">struct</span> is_iterator <span class="token punctuation">{</span>    <span class="token keyword">static</span> T <span class="token function">makeT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>twoptrs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> twoptrs <span class="token operator">&amp;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">R</span><span class="token operator">></span>    <span class="token keyword">static</span> <span class="token keyword">typename</span> R<span class="token operator">::</span>iterator_category <span class="token operator">*</span><span class="token function">test</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">R</span><span class="token operator">></span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">test</span><span class="token punctuation">(</span>R <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token function">makeT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> is_iterator<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">typename</span> __testlib_enable_if<span class="token operator">&lt;</span>std<span class="token operator">::</span>is_array<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span>value<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token operator">></span><span class="token keyword">typename</span> __testlib_enable_if<span class="token operator">&lt;</span><span class="token operator">!</span>is_iterator<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token operator">::</span>type <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token operator">></span><span class="token keyword">typename</span> __testlib_enable_if<span class="token operator">&lt;</span>is_iterator<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token operator">::</span>type <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__println_range</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> A <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__println_range</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token keyword">void</span> println<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token punctuation">,</span> <span class="token keyword">typename</span> C<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> C <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token punctuation">,</span> <span class="token keyword">typename</span> C<span class="token punctuation">,</span> <span class="token keyword">typename</span> D<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> C <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">const</span> D <span class="token operator">&amp;</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token punctuation">,</span> <span class="token keyword">typename</span> C<span class="token punctuation">,</span> <span class="token keyword">typename</span> D<span class="token punctuation">,</span> <span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> C <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">const</span> D <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> E <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token punctuation">,</span> <span class="token keyword">typename</span> C<span class="token punctuation">,</span> <span class="token keyword">typename</span> D<span class="token punctuation">,</span> <span class="token keyword">typename</span> E<span class="token punctuation">,</span> <span class="token keyword">typename</span> F<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> C <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">const</span> D <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> E <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token keyword">const</span> F <span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> A<span class="token punctuation">,</span> <span class="token keyword">typename</span> B<span class="token punctuation">,</span> <span class="token keyword">typename</span> C<span class="token punctuation">,</span> <span class="token keyword">typename</span> D<span class="token punctuation">,</span> <span class="token keyword">typename</span> E<span class="token punctuation">,</span> <span class="token keyword">typename</span> F<span class="token punctuation">,</span> <span class="token keyword">typename</span> G<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> B <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> C <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">const</span> D <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> E <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token keyword">const</span> F <span class="token operator">&amp;</span>f<span class="token punctuation">,</span> <span class="token keyword">const</span> G <span class="token operator">&amp;</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">__testlib_print_one</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* opts */</span>size_t <span class="token function">getOptType</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>size_t <span class="token function">parseOpt</span><span class="token punctuation">(</span>size_t argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size_t index<span class="token punctuation">,</span> std<span class="token operator">::</span>map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span><span class="token operator">&amp;</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> argc<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    size_t type <span class="token operator">=</span> <span class="token function">getOptType</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>string <span class="token function">key</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">;</span>        size_t sep <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sep <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>sep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc <span class="token operator">&amp;&amp;</span> <span class="token function">getOptType</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                val <span class="token operator">=</span> argv<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                inc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    val <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    val <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        opts<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> inc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> inc<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> __testlib_argv<span class="token punctuation">;</span>std<span class="token operator">::</span>map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> __testlib_opts<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">prepareOpts</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected argc>=0 but found "</span> <span class="token operator">+</span> <span class="token function">toString</span><span class="token punctuation">(</span>argc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t n <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>size_t<span class="token operator">></span><span class="token punctuation">(</span>argc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NOLINT(hicpp-use-auto,modernize-use-auto)</span>    __testlib_opts <span class="token operator">=</span> std<span class="token operator">::</span>map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> index <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">parseOpt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> index<span class="token punctuation">,</span> __testlib_opts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    __testlib_argv <span class="token operator">=</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>        __testlib_argv<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> argv<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">__testlib_indexToArgv</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>__testlib_argv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: index '"</span> <span class="token operator">+</span> <span class="token function">toString</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' is out of range [0,"</span> <span class="token operator">+</span> <span class="token function">toString</span><span class="token punctuation">(</span>__testlib_argv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> __testlib_argv<span class="token punctuation">[</span><span class="token function">size_t</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">__testlib_keyToOpts</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__testlib_opts<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: unknown key '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> __testlib_opts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">optValueToIntegral</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">bool</span> nonnegative<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">optValueToLongDouble</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string <span class="token function">parseExponentialOptValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t pos <span class="token operator">=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected typical exponential notation but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pos <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    std<span class="token operator">::</span>string e <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>        e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected typical exponential notation but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected typical exponential notation but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ne <span class="token operator">=</span> optValueToIntegral<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string num <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected typical exponential notation but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">optValueToLongDouble</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> minus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">+</span>ne<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        size_t sep <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sep <span class="token operator">==</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>            num <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sep <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                num<span class="token punctuation">[</span>sep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>sep<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>sep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">-</span>ne<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        size_t sep <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sep <span class="token operator">==</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>            num<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">int</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sep <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                num<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>sep <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>sep<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">||</span> num<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minus <span class="token operator">?</span> <span class="token string">"-"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">optValueToIntegral</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> s_<span class="token punctuation">,</span> <span class="token keyword">bool</span> nonnegative<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string <span class="token function">s</span><span class="token punctuation">(</span><span class="token function">parseExponentialOptValue</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected integer but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">double</span> about <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">signed</span> <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nonnegative<span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected non-negative integer but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected integer but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        about <span class="token operator">=</span> about <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    value <span class="token operator">*</span><span class="token operator">=</span> sign<span class="token punctuation">;</span>    about <span class="token operator">*</span><span class="token operator">=</span> sign<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabsl</span><span class="token punctuation">(</span>value <span class="token operator">-</span> about<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: integer overflow: expected integer but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">optValueToLongDouble</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> s_<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string <span class="token function">s</span><span class="token punctuation">(</span><span class="token function">parseExponentialOptValue</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected float number but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">signed</span> <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        pos<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> period <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">double</span> mul <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>period<span class="token punctuation">)</span>                <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected float number but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                period <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>period<span class="token punctuation">)</span>            mul <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>            <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: expected float number but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>s_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>period<span class="token punctuation">)</span>            value <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">/</span> mul<span class="token punctuation">;</span>        <span class="token keyword">else</span>            value <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    value <span class="token operator">*</span><span class="token operator">=</span> sign<span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">has_opt</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> __testlib_opts<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token operator">::</span>string <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">__testlib_indexToArgv</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token function">optValueToLongDouble</span><span class="token punctuation">(</span><span class="token function">__testlib_indexToArgv</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> U<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> U<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> opt<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>std<span class="token operator">::</span>is_floating_point<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> optValueToIntegral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">__testlib_indexToArgv</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> optValueToIntegral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">__testlib_indexToArgv</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>string value <span class="token operator">=</span> <span class="token function">__testlib_indexToArgv</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">"false"</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: opt by index '"</span> <span class="token operator">+</span> <span class="token function">toString</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': expected bool true/false or 0/1 but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> opt<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>std<span class="token operator">::</span>is_integral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>is_unsigned<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">opt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> opt<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token operator">::</span>string <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">__testlib_keyToOpts</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token function">optValueToLongDouble</span><span class="token punctuation">(</span><span class="token function">__testlib_keyToOpts</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> U<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> U<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> opt<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>std<span class="token operator">::</span>is_floating_point<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> std<span class="token operator">::</span>false_type<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> optValueToIntegral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">__testlib_keyToOpts</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> optValueToIntegral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">__testlib_keyToOpts</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token function">opt</span><span class="token punctuation">(</span>std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> std<span class="token operator">::</span>true_type<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">has_opt</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string value <span class="token operator">=</span> <span class="token function">__testlib_keyToOpts</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">"false"</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">__testlib_fail</span><span class="token punctuation">(</span><span class="token string">"Opts: key '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': expected bool true/false or 0/1 but '"</span> <span class="token operator">+</span> <span class="token function">compress</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token function">opt</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> opt<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>std<span class="token operator">::</span>is_integral<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>is_unsigned<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">opt</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> opt<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>点击保存</p><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>打开“ C++安装的目录\Dev-Cpp\MinGW64\lib\gcc\x86_64-w64-mingw32\4.9.2\include\c++ ”，并把testlib复制在这里面</p><p><img src="https://i.loli.net/2020/06/06/DjaO8f2eUHNu4ZW.png" alt=""></p><h4 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h4><p>打开C++，输入以下内容：</p><p><img src="https://i.loli.net/2020/06/06/Iul2xArL7RYpSj5.png" alt="1"></p><p>然后用rnd.next(a,b);就可以生成a到b之间的随机整数了</p><hr><p>End.</p>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> C++头文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF847G-题解</title>
      <link href="/2020/05/02/cf847g-ti-jie/"/>
      <url>/2020/05/02/cf847g-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF847G-题解"><a href="#CF847G-题解" class="headerlink" title="CF847G 题解"></a>CF847G 题解</h2><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>一共有 $n$ 个小组，每个小组都有 7 个课程，有可能有两个或两个以上的小组同时上课，但是一个教室只可以装下一个小组，问你如果要让所有小组都可以在教室上课，一共需要多少个教室？    </p><p>上面的描述可能理解起来比较复杂，下面我来把他简化一下：</p><p>一共有 $n$ 行，每行7个数，让你求那一列的“1”最多，输出他的数量。</p><p>这样就很简单了，如果你还是不理解，可以继续看下面（会的话可以跳过下面这一段）：</p><p>比如样例二：</p><p>一共 $n$ 个小组（用√表示要上课）</p><table><thead><tr><th align="center"></th><th align="center">第1节课</th><th align="center">第2节课</th><th align="center">第3节课</th><th align="center">第4节课</th><th align="center">第5节课</th><th align="center">第6节课</th><th align="center">第7节课</th></tr></thead><tbody><tr><td align="center">小组1</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">小组2</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">小组3</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>我们可以发现，第七节课要上课的小组最多，有三个，所以输出是 <code>3</code>。</p><h3 id="题目难度："><a href="#题目难度：" class="headerlink" title="题目难度："></a>题目难度：</h3><p>个人认为是 <code>入门</code> 难度左右。</p><h3 id="题目做法："><a href="#题目做法：" class="headerlink" title="题目做法："></a>题目做法：</h3><p>我的代码可能比其他大佬写的题解的代码要慢一点，但是跟好理解一点。</p><p>首先，当然是输入一个 $n$ 和 $n$ 行字符数组（我比较喜欢用字符数组，其实字符串也没问题）：</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//输入 n 行</span>      cin<span class="token operator">>></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//也可以用 scanf，但要注意是‘%s’</span>   <span class="token punctuation">}</span></code></pre><p>输入之后，我们要用一个二维数组，来枚举每一列，用<code>max1</code>来记录最大值，代码如下：</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 7 列</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 n 行</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是‘1’就累加</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>max1<span class="token punctuation">)</span> max1<span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果大于了之前的最大值，则把 sum 赋给 max1</span>      sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记住每个循环之后要清 0</span>   <span class="token punctuation">}</span></code></pre><p>最后，就是输出了，就一个数，很简单。</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>max1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出</span></code></pre><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>max1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//max1 刚开始是要定义为 -1</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n 的最大值为 1000</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入 n 行</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">>></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//也可以用 scanf，但要注意是‘%s’</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 7 列</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//枚举 n 行</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是‘1’就累加</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>max1<span class="token punctuation">)</span> max1<span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果大于了之前的最大值，则把 sum 赋给 max1</span>      sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记住每个循环之后要清 0</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>max1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出</span><span class="token punctuation">}</span></code></pre><p>希望本题解对大家有帮助，也感谢管理员在百忙之中抽空为我审核题解，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF110B-题解</title>
      <link href="/2020/05/02/cf110b-ti-jie/"/>
      <url>/2020/05/02/cf110b-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF110B-题解"><a href="#CF110B-题解" class="headerlink" title="CF110B 题解"></a>CF110B 题解</h2><p>这题居然没有 Pascal 的题解，那我就写一篇吧。</p><h3 id="题目翻译-amp-做法分析："><a href="#题目翻译-amp-做法分析：" class="headerlink" title="题目翻译&amp;做法分析："></a>题目翻译&amp;做法分析：</h3><p>给定一个数 $n$ 让你输出满足这三个条件的字符串：</p><ul><li>整个字符串都由小写字母组成；</li><li>两个相同字母之间的距离为 4 或 7。</li><li>在满足以上条件的前提上，字符串尽量最小。</li></ul><p>然后我们就可以开始找规律，首先，字典序是最小的，那不就是 $a$,$b$,$c$,$d$…… 等等，按顺序来。</p><p>接着，我们画出一个表格：</p><p>先把字典序最小的 $a$ 填进去（注意：两个相同字母之间的距离为 4 或 7。） 为了字典序最小，所以肯定是字典序越小的字母越往前。</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">a</th><th align="center">……</th></tr></thead></table><p>照上面这样子填下去，发现有一个循环节 <code>a</code>+<code>bcda</code>+<code>bcda</code>+<code>bcda</code>+…… 那我们就可以开始写程序了。</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><ul><li><p>Pascal 代码：</p><pre class=" language-pas"><code class="language-pas">var n,i:longint;begin  read(n); //输入  for i:=0 to n-1 do //循环 n 次      write(chr(97+i mod 4)); //刚刚找到的规律end.</code></pre></li><li><p>C++ 代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环 n 次</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token operator">+</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//刚刚找到的规律</span><span class="token punctuation">}</span></code></pre></li></ul><p>提交结果显示，Pascal 的代码会比 C++ 慢 1~2 秒，但内存要更少。</p><p>希望本题解对大家有帮助，也感谢管理员在百忙之中帮助我审核题解，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《工作室微课堂》八年级综合实践第七课——《声音传感器》</title>
      <link href="/2020/05/02/ba-nian-ji-di-qi-ke/"/>
      <url>/2020/05/02/ba-nian-ji-di-qi-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="八年级综合实践第七课《声音传感器》"><a href="#八年级综合实践第七课《声音传感器》" class="headerlink" title="八年级综合实践第七课《声音传感器》"></a>八年级综合实践第七课《声音传感器》</h1><p><a href="https://mp.weixin.qq.com/s/Z7PWpbUZLN3LiEupm5mopQ" target="_blank" rel="noopener">课堂传送门</a></p><p><strong>本文章摘自《邓汉盘名师工作室》，版权归《邓汉盘名师工作室》所有，望周知</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邓汉盘名师工作室 </tag>
            
            <tag> 微课堂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF278A-题解</title>
      <link href="/2020/05/02/cf278a-ti-jie/"/>
      <url>/2020/05/02/cf278a-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF278A-题解"><a href="#CF278A-题解" class="headerlink" title="CF278A 题解"></a>CF278A 题解</h2><p>这题既然没有pascal题解，那我就来一篇</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>有 $n$ 个车站排成一个<strong>环形</strong>，给定 $n$ 个车站之间的距离，求从第$s$个车站到第 $t$ 个车站所需的最短距离。</p><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>也就是说，有一个这样的车站：</p><p><img src="https://i.loli.net/2020/05/01/i6pjY3a4hyAgNno.png" alt="1"></p><p>他可以这样走：</p><p><img src="https://i.loli.net/2020/05/01/C1y8PTSFVeHWnLE.png" alt="1"></p><p>也可以这样走：</p><p><img src="https://i.loli.net/2020/05/01/bC5XiJ6HIA8Bucs.png" alt="1"></p><p>现在告诉你：</p><ul><li>① 和 ② 的距离为 2</li><li>② 和 ③ 的距离为 3</li><li>③ 和 ④ 的距离为 1</li><li>④ 和 ① 的距离为 8</li></ul><p>也就是下面这种状况：</p><p><img src="https://i.loli.net/2020/05/01/GFHVh5N2ysExeR3.png" alt="1"></p><p>那有的人就想，我只要判断出那个路线距离短就可以了呀，那么请看下面：</p><p>你要从 ① 走到 ④，你会怎么走？</p><ul><li>是从 ① –&gt; ② –&gt; ③ –&gt; ④</li><li>还是 ① –&gt; ④</li></ul><p>很明显，当然是 ① –&gt; ② –&gt; ③ –&gt; ④ 要短一点，所以，路线短不一定距离短，好了，既然理解了题目和易错点，就要开始写程序了</p><h3 id="做法分析："><a href="#做法分析：" class="headerlink" title="做法分析："></a>做法分析：</h3><p>我们先用一个数组，把每个点之间的距离存下来，然后计算总路程</p><pre class=" language-pas"><code class="language-pas">read(n);   for i:=1 to n do   begin       read(f[i]);       sum:=sum+f[i];//计算总路程   end;</code></pre><p>然后输入 $s$ , $t$ 并且将小的放在前面</p><pre class=" language-pas"><code class="language-pas">if s>t then //如果s大于t，就将他们交换过来   begin        q:=s; //交换       s:=t;       t:=q;   end;</code></pre><p>再计算从 $s$ 到 $t$ 的路线距离，这时候可能有人问：不是要计算两条吗？</p><p>计算两条当然是可以的，但是我们之前已经计算了总长度，所以说，总长度 减去 $s$ 到 $t$ 的路线距离 就等于 另一条路线长度。</p><pre class=" language-pas"><code class="language-pas">for i:=s to t-1 do    k:=k+f[i];</code></pre><p>最后，只要一个判断输出，就可以了</p><pre class=" language-pas"><code class="language-pas">if k<(sum-k) then       writeln(k)   else       writeln(sum-k);</code></pre><p>下面是完整代码：</p><pre><code>var n,s,t,sum,k,i,q:longint;    f:array [1..102] of longint;Begin   read(n);   for i:=1 to n do   begin       read(f[i]);       sum:=sum+f[i];   end;   read(s,t);   if s&gt;t then   begin        q:=s;       s:=t;       t:=q;   end;   for i:=s to t-1 do       k:=k+f[i];   if k&lt;(sum-k) then       writeln(k)   else       writeln(sum-k);end.</code></pre><p>希望本题解对大家有帮助，也感谢管理员百忙之中帮我审核题解，谢谢！</p><p>End.</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF485A-题解</title>
      <link href="/2020/05/02/cf485a-ti-jie/"/>
      <url>/2020/05/02/cf485a-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF485A-题解"><a href="#CF485A-题解" class="headerlink" title="CF485A 题解"></a>CF485A 题解</h2><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>这个题的题面看得有点复杂（可能只有我这个蒟蒻觉得），但其实只要仔细思考一下，很容易就发现，这题的意思就是输入一个数 $n$，然后再枚举多次，如果在枚举的时候发现了 $a%m==0$ 就直接输出 <code>Yes</code> 并且退出，否则 $a$ 一直加  $a%m$ ，如果枚举到最后，还是没有退出程序，就输出 <code>No</code></p><h3 id="题目难度："><a href="#题目难度：" class="headerlink" title="题目难度："></a>题目难度：</h3><p>个人认为在入门难度左右</p><h3 id="做法分析："><a href="#做法分析：" class="headerlink" title="做法分析："></a>做法分析：</h3><p>在题目分析我们已经说到了是输入两个数 $n,m$，然后再枚举多次（我选的是 $m+100$,但在我看别的题解释，$m+10$ 也可以），如果在枚举的时候发现了 $ a%m==0 $ 就直接输出 <code>Yes</code> 并且退出，否则 $a$ 一直加 $a%m$ 。如果枚举完了还没有退出，就证明不会有停止生产的情况，输出 <code>No</code> 就好了。</p><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><pre><code>#include&lt;cstdio&gt;#include&lt;iostream&gt;long long a,m; //注意，a,m 一定要用long long不然会爆int i;int main() {    scanf(&quot;%lld%lld&quot;,&amp;a,&amp;m); //输入，注意要用%lld    if(a%m==0) { //如果刚开始时就会停产，直接输出&quot;Yes&quot;        puts(&quot;Yes&quot;);        return 0;    }    for(i=1; i&lt;=m+100; i++) { //暴力枚举多次        a+=a%m;        if(a%m==0) {  //如果有a%m==0的情况，直接输出&quot;Yes&quot;            puts(&quot;Yes&quot;);            return 0; //记住要跳出        }    }    puts(&quot;No&quot;); //枚举完了还没有退出，就输出&quot;No&quot;}</code></pre><p>希望本题解对大家有帮助，也感谢管理员百忙之中为我审核题解，谢谢！</p><p>2020/3/14 修改爆掉的LaTeX。</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF701A-题解</title>
      <link href="/2020/05/02/cf701b-ti-jie/"/>
      <url>/2020/05/02/cf701b-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="CF701B-题解"><a href="#CF701B-题解" class="headerlink" title="CF701B 题解"></a>CF701B 题解</h2><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>这道题是给出了一个棋盘，大小为 $n×n$ 并且里面有 $m$ 个棋子，每个棋子可以攻击与他同一行，列的位置，并且 $n$ 和 $m$ 都很大，数据范围为 ( $1 \leq n \leq 100000, 1 \leq m \leq min(100000,n^{2} )$)。我们要输出每放一个棋子后，有多少个地方是攻击不到的。</p><h3 id="题目难度："><a href="#题目难度：" class="headerlink" title="题目难度："></a>题目难度：</h3><p>个人认为在 普及/提高- 左右。</p><h3 id="算法分析："><a href="#算法分析：" class="headerlink" title="算法分析："></a>算法分析：</h3><p>当看到这题的第一眼，我就想到了二维数组模拟，但是，在看了数据范围之后，发现行不通，二维数组绝对会爆，于是我就想到了 $stl$ 中的 $set$ 成员函数，下面我们来介绍一下什么是 $set$：</p><ul><li>定义 $set$：</li></ul><blockquote><p>格式：$set &lt;value_type&gt; name;$</p><p>其中 $value_type$ 是 $set$ 中所要存储的元素类型，例如 <code>int</code>,<code>string</code>,或自定义的结构体名称。</p><p>定义 $set$ 还要包含 $set$ 头文件，即 <code>#include&lt;set&gt;</code>。</p></blockquote><ul><li>介绍 $set$</li></ul><blockquote><p>$set$ 的内部实现其实是一棵红黑树，<code>int</code>，<code>string</code> 等C++自带变量类型已经帮我们定义好了小于号，也就是他会自动帮我们进行排序，其中 <code>int</code> 在 $set$ 中从小到大排，<code>string</code> 在 $set$ 中按字典序排。</p></blockquote><ul><li>使用 $set$</li></ul><blockquote><p>$set$ 有众多的内置函数，包括 <code>insert(x)</code>,<code>erase(x)</code>,<code>empty()</code>,<code>size()</code>,<code>clear()</code>,<code>find(x)</code> 等等，下面让我们来介绍一下这些内置函数的作用。</p><p>1.<code>insert(x)</code>/<code>erase(x)</code> 是在 $set$ 中 <strong>插入/删除</strong> 一个元素 $x$。</p><p>2.<code>empty()</code>/<code>size()</code> 是判断 $set$ 是否为空/返回 $set$ 的元素个数。</p><p>3.<code>clear()</code> 清空一个 $set$ 的所有元素。</p><p>4.<code>find(x)</code> 查找 $set$ 中是否有 $x$ 这个元素。</p></blockquote><p>了解了 $set$ 函数之后，就可以开始编写我们的程序了。</p><h3 id="完整代码-amp-解析："><a href="#完整代码-amp-解析：" class="headerlink" title="完整代码&amp;解析："></a>完整代码&amp;解析：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span> </span><span class="token comment" spellcheck="true">//包含 set 的头文件</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义 long long 变量</span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   set<span class="token operator">&lt;</span>ll<span class="token operator">></span> set1<span class="token punctuation">,</span>set2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个 $set$</span>   set1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把两个 $set$ 函数清空，具体见上面</span>   set2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入，注意要用 %lld</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入，注意要用 %lld</span>      set1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入一个元素a</span>      set2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入一个元素b</span>      ll len1<span class="token operator">=</span>set1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len2<span class="token operator">=</span>set2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把 set1 和 set2 的长度分别赋值给 len1 和 len2</span>      ans<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">-</span>len2<span class="token operator">*</span>n<span class="token operator">-</span>n<span class="token operator">*</span>len1<span class="token operator">+</span>len1<span class="token operator">*</span>len2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用公式计算答案 ans</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出，注意要用 %lld</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>希望本题解对大家有帮助，也感谢管理员百忙之中抽空为我审核题解，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 题解版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yorg.io游戏攻略</title>
      <link href="/2020/05/01/yorg-io-gong-lue/"/>
      <url>/2020/05/01/yorg-io-gong-lue/</url>
      
        <content type="html"><![CDATA[<h2 id="游戏介绍："><a href="#游戏介绍：" class="headerlink" title="游戏介绍："></a>游戏介绍：</h2><p>yorg.io是一款塔防游戏，会有很多僵尸从地图边界冲向你的主基地，你就是需要合理的利用防御塔，资源他来做好保卫战，以求生存更长的时间。</p><h2 id="建筑大全："><a href="#建筑大全：" class="headerlink" title="建筑大全："></a>建筑大全：</h2><h3 id="基地："><a href="#基地：" class="headerlink" title="基地："></a>基地：</h3><ul><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/3qaqp24k.png" alt=""> 主基地 ：整个游戏的核心，僵尸的目标。主基地被毁游戏结束。主基地的等级便是其它建筑的最高等级</li></ul><h3 id="防御类建筑："><a href="#防御类建筑：" class="headerlink" title="防御类建筑："></a>防御类建筑：</h3><ul><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vdj4c7wi.png" alt=""> 城墙：阻挡僵尸，使僵尸无法前进。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7307nnl2.png" alt=""> 箭塔：一种向单个僵尸发射高伤害的箭的防御塔。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/l5c8jeou.png" alt=""> 加农炮：发射炮弹，范围伤害，攻击僵尸</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/pka3ohbt.png" alt=""> 闪电塔：用核能发射曲折闪电，闪电可以蔓延攻击其他僵尸。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/pl60inr0.png" alt=""> 护盾塔：将铀转换为护盾，抵挡一次攻击。</p></li></ul><h3 id="资源类建筑："><a href="#资源类建筑：" class="headerlink" title="资源类建筑："></a>资源类建筑：</h3><ul><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g8wvacv0.png" alt=""> 水晶开采机：水晶是此游戏中的货币，把水晶开采机放在水晶矿四周便可开采水晶并运至主基地（如果离基地较远则需运输机运输）</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hs665hek.png" alt=""> 生铁开采机：将生铁开采机放在铁矿四周，可开采生铁。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6cb6nc1o.png" alt=""> 炮弹工厂：将2个生铁转换为炮弹，如无生铁不工作。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zvk3jpig.png" alt=""> 伐木机：将伐木机放在树木周围，可开采木材。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/eglit1i3.png" alt=""> 钢铁工厂：将2木材与1生铁转换成钢铁。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hkx2za8v.png" alt=""> 锯木机：将木材转化为木棍。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3spihbov.png" alt=""> 制箭厂：将钢铁与木棍转换为箭。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xykbsork.png" alt=""> 铀矿开采机：将铀矿开采机放置在铀矿四周，可开采铀。</p></li><li><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/jkgmix4r.png" alt=""> 核反应堆：将铀转换为核能。</p></li></ul><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/l01a9pli.png" alt=""> 运输机：在各建筑间运输物品</li></ul><h2 id="游戏玩法："><a href="#游戏玩法：" class="headerlink" title="游戏玩法："></a>游戏玩法：</h2><p>游戏开始之前，需要放置主基地，之后游戏自动开始，放置的时候首先得寻找一个好的位置（建议放在水晶矿附近，附近的水晶矿越多越好），地图有限，资源随机，位置可能决定后期能够发展到多大，最好是找一个周围有多种矿产，且位置较近的地方，网上有人说，建在边界上会好些（注意，不是把大本营直接建在边界，而是尽量在边上，不要理解错我）。放置之后，需要利用水晶采矿机开采水晶，然后建造城墙，抵挡外敌，升级基地，能够解锁更多道具。打败boss或者生存一天你就有技能点进行技能学习，可以选择提高伤害，或者增加防御，生产速度等等。生存的天数越长，之后遇到的攻击越强烈，当你布局不好的时候之后就会手忙脚乱的，前面有些无聊，可以选择快进，加快游戏节奏，如果像重新布局，可以暂停游戏进行重新改造。</p><h2 id="游戏技巧："><a href="#游戏技巧：" class="headerlink" title="游戏技巧："></a>游戏技巧：</h2><p>对于新手来说，可能刚刚开始会觉得很困难，但是你掌握了技巧之后，你会发现面对僵尸的攻击应付自如，得心应手，下面，就让我来讲一些使用小技巧吧：</p><h3 id="技巧一：万里长城"><a href="#技巧一：万里长城" class="headerlink" title="技巧一：万里长城"></a>技巧一：万里长城</h3><p>估计对于许多新手来说，僵尸四面八方的冲来，防御甚为艰苦，那么，这个方法对你来说就很有用了，他可以帮你减少一大部分僵尸的攻击。</p><ul><li><p>首先，你的主基地要至少在5级以上，然后在基地已经被围墙包围并且有多余的围墙。</p></li><li><p>然后，把视野移动到地图最边上，沿着边缘建立一排围墙，效果如下图：<br><img src="https://i.loli.net/2020/04/23/dugO32NaGjR9K8U.png" alt="QQ截图20200423170903.png"></p></li><li><p>最后升级围墙，使围墙与主基地等级相差不超过一级，等你慢慢重复以上动作，你会发现，你把将近一半的地图围起来时，会有将近一半的僵尸被挡在地图边缘，无法通过，这时，你就成功了，等你把整个地图围起来是，就可以很轻松了。</p></li></ul><p>但是要注意，围墙尽量等级要高，而且要在技能树里升级，级别越高当然越好，最好在围墙后建设防御建筑，保证围墙不会被打穿。</p><h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><ul><li><p>Q1：我明明一直在升级防御建筑，为什么还是在30多天就死了？</p></li><li><p>A1：您的围墙等级是否和大本营等级一样？技能树是否升级？大本营是否在城池中心？</p></li><li><p>Q2：僵尸是从那里出来的？</p></li><li><p>A2：我们把可以放建筑的地方叫做“真实世界”，不可以放建筑的叫做“虚空世界”，僵尸就是从最边上的虚空世界里出来的，所以你无法阻止僵尸的出现</p></li></ul><h2 id="游戏下载网址："><a href="#游戏下载网址：" class="headerlink" title="游戏下载网址："></a>游戏下载网址：</h2><ul><li><a href="https://yorg.io/" target="_blank" rel="noopener">在线玩</a></li><li><a href="https://dl.3dmgame.com/pc/127906.html" target="_blank" rel="noopener">下载网址</a></li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>个人觉得是在所有防塔游戏里，可以排到前3的防塔游戏了，因为此游戏的特效丰富，不受限制，可以根据自己爱好自由发挥，是一个不错的选择。</p><h2 id="鸣谢："><a href="#鸣谢：" class="headerlink" title="鸣谢："></a>鸣谢：</h2><ul><li>@<a href="https://www.luogu.com.cn/user/203452" target="_blank" rel="noopener">_tommysun_</a> 大佬对此文章的重大贡献</li><li>@<a href="https://www.luogu.com.cn/user/203446" target="_blank" rel="noopener">诸奕丞</a> 对此文章的支持</li></ul>]]></content>
      
      
      <categories>
          
          <category> 灌水版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言简介</title>
      <link href="/2020/04/29/c-yu-yan-jian-jie/"/>
      <url>/2020/04/29/c-yu-yan-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><ul><li><p>什么是信息学奥林匹克竞赛</p></li><li><p>什么是C++语言</p></li><li><p>C++语言特点</p></li><li><p>C++语言标准</p></li><li><p>C++语言工作原理</p></li><li><p>安装DEV C++</p></li><li><p>推荐书籍</p></li></ul><h2 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h2><h3 id="1-信息学奥林匹克竞赛"><a href="#1-信息学奥林匹克竞赛" class="headerlink" title="1. 信息学奥林匹克竞赛"></a>1. 信息学奥林匹克竞赛</h3><ul><li><p>信息学奥林匹克竞赛是一项<strong>益智性</strong>的<strong>竞赛活动</strong>，核心是考查选手的智力和使用计算机解题的能力，选手首先应针对竞赛题目的要求构建数学模型，进而构造出计算机可以接受的算法，之后编写出计算机能够执行的程序。</p></li><li><p><strong>程序设计</strong>是信息学竞赛的<strong>基本</strong>，选手参与竞赛活动的第一步是熟练掌握一门程序设计语言，目前竞赛中允许使用的程序设计语言有 <code>C语言</code>、<code>C++</code>、<code>Pascal</code>。</p></li></ul><h3 id="2-初步了解C-语言"><a href="#2-初步了解C-语言" class="headerlink" title="2. 初步了解C++语言"></a>2. 初步了解C++语言</h3><ul><li><p>C++ 是一种<strong>静态类型</strong>的、编译式的、通用的、大小写敏感的、不规则的<strong>编程语言</strong>，是面向对象的一个较为优秀的语言</p></li><li><p>C++ 被大众认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p></li><li><p>C++ 是 C语言 的一种升级版，由 Bjarne Stroustrup 和他的团队开发</p></li><li><p>虽然 C++ 是 C语言 的一个升级版，事实上，合法的 C 程序在 C++ 上编译都没有问题。</p></li></ul><h3 id="3-C-工作特点"><a href="#3-C-工作特点" class="headerlink" title="3. C++工作特点"></a>3. C++工作特点</h3><ul><li><p>支持数据封装和数据隐藏</p></li><li><p>支持继承和重用</p></li><li><p>支持多态性</p></li></ul><p>这几种特点使他在各种编程语言中脱颖而出，成为大众所认可的编程语言。</p><h3 id="4-C-语言标准"><a href="#4-C-语言标准" class="headerlink" title="4. C++语言标准"></a>4. C++语言标准</h3><ul><li><p>C++ 98 标准<br>C++标准第一版，1998年发布。正式名称为ISO/IEC 14882:1998。</p></li><li><p>C++ 03 标准<br>C++标准第二版，2003年发布。正式名称为ISO/IEC 14882:2003。</p></li><li><p>C++ 11 标准<br>C++标准第三版，2011年8月12日发布。正式名称为ISO/IEC 14882:2011。<br>C++11对容器类的方法做了三项主要修改。</p></li><li><p>C++ 14 标准<br>C++标准第四版，2014年8月18日发布。正式名称为ISO/IEC 14882:2014</p></li></ul><h3 id="5-C-工作原理"><a href="#5-C-工作原理" class="headerlink" title="5. C++工作原理"></a>5. C++工作原理</h3><p>你在DEVC++上编写一个程序，他是如何运行的呢？</p><ul><li><p>第一步是对程序进行编译，这需要用到他安装时自带的编译器。编译器将C++语句转换成机器码(即为可以被电脑运行的exe程序)；如果这个步骤成功，则进行下一步。</p></li><li><p>下一步就是对程序进行链接，这需要用到链接器。链接器将编译获得机器码与C++库中的代码进行合并。C++库包含了执行某些常见任务的函数。例如，一个C++库中包含标准的平方根函数sqrt，所以不必亲自计算平方根。C++库中还包含一些子程序，它们把数据发送到显示器，并知道如何读写硬盘上的数据文件。</p></li></ul><h3 id="6-DEVC-下载并安装"><a href="#6-DEVC-下载并安装" class="headerlink" title="6. DEVC++下载并安装"></a>6. DEVC++下载并安装</h3><ul><li>第一步，打开DEVC++<a href="https://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">官网</a></li></ul><p><img src="https://i.loli.net/2020/04/29/YlW421gV3H8hMLC.png" alt="1"></p><ul><li><p>第二步，点击绿色的按钮【Download】</p></li><li><p>第三步，等5秒，会自动下载</p></li><li><p>第四步，找到下载的exe文件，双击打开</p></li><li><p>默认为英文，也可以自行修改，等它自动安装完成，你就会发现桌面上有了这个图标</p></li></ul><p><img src="https://i.loli.net/2020/04/29/wEuLhI7J8lmQB6g.png" alt="1"></p><ul><li>双击打开即可，恭喜你成功安装了DEVC++</li></ul><h3 id="7-推荐书籍"><a href="#7-推荐书籍" class="headerlink" title="7.推荐书籍"></a>7.推荐书籍</h3><h4 id="入门书籍"><a href="#入门书籍" class="headerlink" title="入门书籍"></a>入门书籍</h4><p>《信息学奥赛一本通C++版》</p><p>《C++程序设计教程》</p><p>《大话设计模式》</p><p>《C++编程规范:101条规则、准则与最佳实践》</p><p>《C和C++程序员面试秘籍》</p><h4 id="进阶书籍"><a href="#进阶书籍" class="headerlink" title="进阶书籍"></a>进阶书籍</h4><p>《C++程序设计语言》英文第四版</p><p>《C++ Primer 第5版（英文版）》</p><p>《C++标准库：自学教程与参考手册（第2版）（英文版）》</p><p>《C++ Concurrency in Action|C++ 并发实战》</p><p>《C和C++安全编码（第2版）（英文版）》</p><hr><p>喜欢的话记得点赞哦</p><p>部分内容参考：</p><ul><li>DEVC++百度百科</li><li>C++简介 菜鸟教程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2020/04/28/xue-xi-bi-ji/"/>
      <url>/2020/04/28/xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="蒟蒻Andysun06的学习笔记"><a href="#蒟蒻Andysun06的学习笔记" class="headerlink" title="蒟蒻Andysun06的学习笔记"></a>蒟蒻Andysun06的学习笔记</h2><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ本文章未经博主许可，不能转载！</p><h4 id="本文章同步发表于："><a href="#本文章同步发表于：" class="headerlink" title="本文章同步发表于："></a>本文章同步发表于：</h4><ul><li><a href="https://www.luogu.com.cn/blog/andysun123/Learning-notes" target="_blank" rel="noopener">洛谷博客</a></li><li><a href="https://blog.csdn.net/a_n_d_y_s_u_n__/article/details/105159775" target="_blank" rel="noopener">CSDN博客</a></li><li><a href="https://www.zybuluo.com/Andysun06/note/1687658" target="_blank" rel="noopener">作业部落博客</a></li><li><a href="https://oiblog.blog.luogu.org/Learning-notes" target="_blank" rel="noopener">小号博客</a></li></ul><hr><h3 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h3><p>ㅤㅤ本文章是蒟蒻我独立创作的，大部分内容都是基础，还包括一些其他东西的用法（例如随机数），本文章<br>所涉及的知识大部分都是自学的（因为还没找到适合我的老师）。还有一部分，是@<a href="https://www.luogu.com.cn/user/45176" target="_blank" rel="noopener">FCBM71</a> 和@<a href="https://www.luogu.com.cn/user/227514" target="_blank" rel="noopener">jijidawang</a> 等大<br>佬教我的，我在此感谢他们对我的教导，希望我可以和他们共同努力，变得更厉害，也谢谢广大谷友对我的帮<br>助和支持，我会继续努力的！<br>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ——By  Andysun06</p><hr><h3 id="二、目录："><a href="#二、目录：" class="headerlink" title="二、目录："></a>二、目录：</h3><hr><ul><li><p>① 栈</p><ul><li>STL——栈的分析及用法</li><li>手写——栈的分析及用法（速度较快）</li></ul></li><li><p>② 队列</p><ul><li>STL——队列的分析及用法</li><li>手写——队列的分析及用法（速度较快）</li></ul></li><li><p>③ 快速幂</p><ul><li>3.1 算法分析</li><li>3.2 模板</li></ul></li><li><p>④ 线性筛</p><ul><li>4.1 算法分析</li><li>4.2 模板</li></ul></li><li><p>⑤ 并查集</p><ul><li>5.1 算法分析</li><li>5.2 模板</li></ul></li><li><p>⑥ C++随机数</p></li><li><p>⑦ 前缀和</p><ul><li>7.1 一维前嘴和</li><li>7.2 二维前缀和</li></ul><hr></li></ul><h3 id="三、算法笔记"><a href="#三、算法笔记" class="headerlink" title="三、算法笔记"></a>三、算法笔记</h3><h4 id="ㅤㅤㅤ-①-栈："><a href="#ㅤㅤㅤ-①-栈：" class="headerlink" title="ㅤㅤㅤ ① 栈："></a>ㅤㅤㅤ ① 栈：</h4><p>ㅤㅤㅤㅤㅤㅤ- STL——栈的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 包含栈的头文件：<code>#include&lt;stack&gt;</code>  。<br>ㅤㅤㅤㅤㅤㅤㅤ  2. 栈的特点：<strong>先进后出</strong>，与队列相反<br>ㅤㅤㅤㅤㅤㅤㅤ  3. 定义一个栈：<code>stack&lt;Type&gt; s;</code> 其中<code>Type</code>为数据类型。<br>ㅤㅤㅤㅤㅤㅤㅤ  4. 栈的主要操作：</p><pre class=" language-cpp"><code class="language-cpp">           s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将a压入栈顶</span>           s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除栈顶的元素，但不会返回</span>           s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回栈顶的元素，但不会删除</span>           s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回栈中元素的个数</span>           s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查栈是否为空，如果为空返回true，否则返回false</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  5. 栈的模板题练习：<a href="https://www.luogu.com.cn/problem/CF26B" target="_blank" rel="noopener">CF26B</a></p><p>ㅤㅤㅤㅤㅤㅤ- 手写——栈的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ   1. 难度不大，但比STL要更快。<br>ㅤㅤㅤㅤㅤㅤㅤ   2. 手写模板（具体作用见上面解释）：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           入栈：q<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>           出栈：n<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>           查栈顶：n<span class="token operator">=</span>q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ   3. 原理：用数组模拟栈的操作。</p><hr><h4 id="ㅤㅤㅤ-②-队列："><a href="#ㅤㅤㅤ-②-队列：" class="headerlink" title="ㅤㅤㅤ ② 队列："></a>ㅤㅤㅤ ② 队列：</h4><p>ㅤㅤㅤㅤㅤㅤ- STL——队列的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 包含队列的头文件：<code>#include&lt;queue&gt;</code>  。       </p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 队列的特点：<strong>先进先出</strong>，与栈相反   </p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 定义一个队列：<code>queue&lt;Type&gt; q;</code> 其中<code>Type</code>为数据类型。  </p><p>ㅤㅤㅤㅤㅤㅤㅤ  4. 队列的主要操作：</p><pre class=" language-cpp"><code class="language-cpp">           q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将a压入队列尾部</span>           q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除队首元素，但不返回</span>           q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队首元素，但不删除</span>           q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队尾元素，但不删除</span>           q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回队列中元素的个数</span>           q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查队列是否为空，如果为空返回true，否则返回false</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  5. 队列的模板题练习：<a href="https://www.luogu.com.cn/problem/CF637B" target="_blank" rel="noopener">CF637B</a></p><p>ㅤㅤㅤㅤㅤㅤ- 手写——队列的分析及用法：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 难度不大，但比STL要更快。  </p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 手写模板（具体作用见上面解释）：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           入队：q<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>           出队首：q<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>           查队首：n<span class="token operator">=</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>原理：用数组模拟队列的操作。</p><hr><h4 id="ㅤㅤㅤ-③-快速幂："><a href="#ㅤㅤㅤ-③-快速幂：" class="headerlink" title="ㅤㅤㅤ ③ 快速幂："></a>ㅤㅤㅤ ③ 快速幂：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 快速幂用途：用于直接求一个数的 n 次幂会爆数据的题<br>ㅤㅤㅤㅤㅤㅤㅤ  2. 快速幂原理：具体见<a href="https://blog.csdn.net/henu111/article/details/81188659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158523255919726867821069%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&request_id=158523255919726867821069&biz_id=0&utm_source=distribute.pc_search_result.none-task" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>base<span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断b的奇偶</span>                       ans<span class="token operator">*</span><span class="token operator">=</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当n为奇数时，乘以base（当前权值下的a）</span>                    base<span class="token operator">*</span><span class="token operator">=</span>base<span class="token punctuation">;</span>                    b<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于b/=2</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> ans<span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 快速幂的模板题练习：<a href="https://www.luogu.com.cn/problem/P1226" target="_blank" rel="noopener">P1226</a></p><hr><h4 id="ㅤㅤㅤ-④-线性筛："><a href="#ㅤㅤㅤ-④-线性筛：" class="headerlink" title="ㅤㅤㅤ ④ 线性筛："></a>ㅤㅤㅤ ④ 线性筛：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 线性筛用途：快速的求范围 n 内的所有素数，其时间复杂度小于暴力求素数。</p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 线性筛原理：具体见<a href="https://zhuanlan.zhihu.com/p/108674990" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token keyword">bool</span> isPrime<span class="token punctuation">[</span><span class="token number">100000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> Prime<span class="token punctuation">[</span><span class="token number">5000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">void</span> <span class="token function">GetPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">memset</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               isPrime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                       Prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       isPrime<span class="token punctuation">[</span>i<span class="token operator">*</span>Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                           <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//main函数第一行加上  GetPrime(n)  n为范围</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 线性筛的模板题练习：<a href="https://www.luogu.com.cn/problem/P3383" target="_blank" rel="noopener">P3383</a></p><hr><h4 id="ㅤㅤㅤ-⑤-并查集："><a href="#ㅤㅤㅤ-⑤-并查集：" class="headerlink" title="ㅤㅤㅤ ⑤ 并查集："></a>ㅤㅤㅤ ⑤ 并查集：</h4><p>ㅤㅤㅤㅤㅤㅤ- 算法分析：</p><p>ㅤㅤㅤㅤㅤㅤㅤ  1.并查集，顾名思义，就是有合并，查找等操作的集合。</p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 文档教程<a href="https://blog.csdn.net/low5252/article/details/90611503" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 视频教程<a href="https://www.bilibili.com/video/av26268911" target="_blank" rel="noopener">这里</a></p><p>ㅤㅤㅤㅤㅤㅤ- 程序模板：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>           <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>           <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>           <span class="token keyword">int</span> <span class="token function">zhao</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来查找x的祖宗</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>                  <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">zhao</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">bool</span> <span class="token function">cha</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来判断x,y的祖宗是不是同一个人</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">zhao</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">zhao</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           <span class="token keyword">void</span> <span class="token function">bin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用来合并x,y</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token function">zhao</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">zhao</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span>               <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> z<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>                        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">bin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">else</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 本程序为并查集模板<a href="https://www.luogu.com.cn/problem/P3367" target="_blank" rel="noopener">P3367</a>的AC程序</p><hr><h4 id="ㅤㅤㅤ-⑥-C-随机数："><a href="#ㅤㅤㅤ-⑥-C-随机数：" class="headerlink" title="ㅤㅤㅤ ⑥ C++随机数："></a>ㅤㅤㅤ ⑥ C++随机数：</h4><p>ㅤㅤㅤㅤㅤㅤㅤ  1. 随机数头文件 <code>#include &lt;cstdlib&gt;</code> 和 <code>#include&lt;ctime&gt;</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  2. 使用宏定义 <code>#define random(a,b) (rand()%(b-a)+a)</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  3. 在开头加上 <code>srand((int)time(0));</code></p><p>ㅤㅤㅤㅤㅤㅤㅤ  4. 最后，在程序中加入 <code>random(l,r);</code> 就可以求 l 到 r 之间的随机数了。</p><p>ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ  5.程序示范：</p><pre class=" language-cpp"><code class="language-cpp">           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>           <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span>           <span class="token macro property">#<span class="token directive keyword">define</span> random(a,b) (rand()%(b-a)+a)</span>           <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>           <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 产生随机种子,把0换成NULL也行</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   cout<span class="token operator">&lt;&lt;</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//此程序可以产生 5 到 10 之间的随机数</span></code></pre><hr><h4 id="ㅤㅤㅤ-⑦-前缀和："><a href="#ㅤㅤㅤ-⑦-前缀和：" class="headerlink" title="ㅤㅤㅤ ⑦ 前缀和："></a>ㅤㅤㅤ ⑦ 前缀和：</h4><ul><li>首先介绍：前缀和是什么？ 答：个人认为其实就是一种预处理，可以大大降低时<br>间复杂度，是一种非常方便快捷的基础算法。</li></ul><ul><li><p>一维前缀和：具体文章讲解<a href="https://blog.csdn.net/XT_NOI/article/details/72666275" target="_blank" rel="noopener">这里</a></p></li><li><p>二维前缀和：具体文章讲解<a href="https://blog.csdn.net/XT_NOI/article/details/72715904" target="_blank" rel="noopener">这里</a></p></li></ul><ul><li>个人认为一维前缀和思维难度，代码难度较低，几乎是一看就懂的感觉，二维组<br>要稍加思考，也比较容易。</li></ul><hr><h3 id="四、友情链接"><a href="#四、友情链接" class="headerlink" title="四、友情链接"></a>四、友情链接</h3><ul><li><a href="\user\70299">作者个人主页</a></li><li><a href="https://www.luogu.com.cn/blog/andysun123/" target="_blank" rel="noopener">作者其他文章</a></li><li><a href="https://www.luogu.com.cn/team/25191" target="_blank" rel="noopener">XSLM 官方团队</a></li><li><a href="https://www.luogu.com.cn/team/23467" target="_blank" rel="noopener">猫国建设者 讨论群</a></li><li><a href="www.luogu.com.cn/user/153141">钺Programmer 的个人主页</a></li></ul><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>ㅤㅤ本文章已经接近尾声了，我很庆幸，你可以坚持看下来，这些东西都是我精心准备的，希望可以对你有帮<br>助。当然，如果你觉得这篇文章写得好，可以在下面评论，或者点赞。如果你觉得有错误，或者有建议，欢迎<br>私信我，或者加我的QQ：944898918 。最后，希望你可以继续努力，学习编程，加油！<br>  ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ——By  Andysun06</p><h3 id="六、有关本文章"><a href="#六、有关本文章" class="headerlink" title="六、有关本文章"></a>六、有关本文章</h3><ul><li>作者：@Andysun06</li><li>写作开始时间：2020/3/26</li><li>最近一次更新：2020/4/10</li><li>版本：V1.5</li><li>目前更新状况：未完待续……</li><li>其他：评论请统一为“Orz”</li></ul><hr><p>即将推出：</p><ul><li>图论——基础存图</li></ul><p>敬请期待</p>]]></content>
      
      
      <categories>
          
          <category> 学术版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
